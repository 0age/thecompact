// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import { Test, console } from "forge-std/Test.sol";
import { TheCompact } from "../src/TheCompact.sol";
import { MockERC20 } from "../lib/solady/test/utils/mocks/MockERC20.sol";
import { Compact, BatchCompact, Segment } from "../src/types/EIP712Types.sol";
import { ResetPeriod } from "../src/types/ResetPeriod.sol";
import { Scope } from "../src/types/Scope.sol";
import { CompactCategory } from "../src/types/CompactCategory.sol";
import { DepositDetails } from "../src/types/DepositDetails.sol";
import { ISignatureTransfer } from "permit2/src/interfaces/ISignatureTransfer.sol";

import { HashLib } from "../src/lib/HashLib.sol";
import { IdLib } from "../src/lib/IdLib.sol";

import { AlwaysOKAllocator } from "../src/test/AlwaysOKAllocator.sol";
import { AlwaysOKEmissary } from "../src/test/AlwaysOKEmissary.sol";
import { SimpleAllocator } from "../src/examples/allocator/SimpleAllocator.sol";
import { QualifiedAllocator } from "../src/examples/allocator/QualifiedAllocator.sol";

import { BasicTransfer, SplitTransfer, Claim } from "../src/types/Claims.sol";
import { BatchTransfer, SplitBatchTransfer, BatchClaim } from "../src/types/BatchClaims.sol";

import { MultichainClaim, ExogenousMultichainClaim } from "../src/types/MultichainClaims.sol";

import { BatchMultichainClaim, ExogenousBatchMultichainClaim } from "../src/types/BatchMultichainClaims.sol";

import {
    SplitComponent,
    TransferComponent,
    SplitByIdComponent,
    SplitBatchClaimComponent
} from "../src/types/Components.sol";

interface EIP712 {
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

interface ImmutableCreate2Factory {
    function safeCreate2(bytes32 salt, bytes calldata initializationCode)
        external
        payable
        returns (address deploymentAddress);
}

struct CreateClaimHashWithWitnessArgs {
    bytes32 typehash;
    address arbiter;
    address sponsor;
    uint256 nonce;
    uint256 expires;
    uint256 id;
    uint256 amount;
    bytes32 witness;
}

struct CreateBatchClaimHashWithWitnessArgs {
    bytes32 typehash;
    address arbiter;
    address sponsor;
    uint256 nonce;
    uint256 expires;
    bytes32 idsAndAmountsHash;
    bytes32 witness;
}

struct CreatePermitBatchWitnessDigestArgs {
    bytes32 domainSeparator;
    bytes32 tokenPermissionsHash;
    address spender;
    uint256 nonce;
    uint256 deadline;
    bytes32 activationTypehash;
    bytes32 idsHash;
    bytes32 claimHash;
}

struct SetupPermitCallExpectationArgs {
    bytes32 activationTypehash;
    uint256[] ids;
    bytes32 claimHash;
    uint256 nonce;
    uint256 deadline;
    bytes signature;
}

struct TestParams {
    address recipient;
    ResetPeriod resetPeriod;
    Scope scope;
    uint256 amount;
    uint256 nonce;
    uint256 deadline;
}

struct LockDetails {
    address token;
    address allocator;
    ResetPeriod resetPeriod;
    Scope scope;
    bytes12 lockTag;
}

contract TheCompactTest is Test {
    using IdLib for uint96;

    TheCompact public theCompact;
    MockERC20 public token;
    MockERC20 public anotherToken;
    address permit2 = address(0x000000000022D473030F116dDEE9F6B43aC78BA3);
    uint256 swapperPrivateKey;
    address swapper;
    uint256 allocatorPrivateKey;
    address allocator;
    bytes32 compactEIP712DomainHash =
        keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
    bytes32 permit2EIP712DomainHash = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
    address alwaysOKAllocator;

    string constant compactTypestring =
        "Compact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256 id,uint256 amount)";
    string constant compactWitnessTypestring =
        "Compact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256 id,uint256 amount,CompactWitness witness)CompactWitness(uint256 witnessArgument)";
    string constant witnessTypestring = "CompactWitness witness)CompactWitness(uint256 witnessArgument)";
    bytes32 constant compactTypehash = keccak256(bytes(compactTypestring));
    bytes32 constant compactWithWitnessTypehash = keccak256(bytes(compactWitnessTypestring));

    function setUp() public virtual {
        address permit2Deployer = address(0x4e59b44847b379578588920cA78FbF26c0B4956C);
        address deployedPermit2Deployer;
        address permit2DeployerDeployer = address(0x3fAB184622Dc19b6109349B94811493BF2a45362);
        bytes memory permit2DeployerCreationCode =
            hex"604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3";
        vm.deal(permit2DeployerDeployer, 1e18);
        vm.prank(permit2DeployerDeployer);
        assembly ("memory-safe") {
            deployedPermit2Deployer :=
                create(0, add(permit2DeployerCreationCode, 0x20), mload(permit2DeployerCreationCode))
        }

        require(deployedPermit2Deployer != permit2Deployer, "Contract deployment failed");

        bytes memory permit2CreationCalldata =
            hex"0000000000000000000000000000000000000000d3af2663da51c1021500000060c0346100bb574660a052602081017f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a60408301524660608301523060808301526080825260a082019180831060018060401b038411176100a557826040525190206080526123c090816100c1823960805181611b47015260a05181611b210152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db1461126c578063137c29fe146110755780632a2d80d114610db75780632b67b57014610bde57806330f28b7a14610ade5780633644e51514610a9d57806336c7851614610a285780633ff9dcb1146109a85780634fe02b441461093f57806365d9723c146107ac57806387517c451461067a578063927da105146105c3578063cc53287f146104a3578063edd9444b1461033a5763fe8ec1a7146100c657600080fd5b346103365760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103365767ffffffffffffffff833581811161033257610114903690860161164b565b60243582811161032e5761012b903690870161161a565b6101336114e6565b9160843585811161032a5761014b9036908a016115c1565b98909560a43590811161032657610164913691016115c1565b969095815190610173826113ff565b606b82527f5065726d697442617463685769746e6573735472616e7366657246726f6d285460208301527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472838301527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608301527f3620646561646c696e652c000000000000000000000000000000000000000000608083015282519a8b9181610222602085018096611f93565b918237018a8152039961025b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09b8c8101835282611437565b5190209085515161026b81611ebb565b908a5b8181106102f95750506102f6999a6102ed9183516102a081610294602082018095611f66565b03848101835282611437565b519020602089810151858b015195519182019687526040820192909252336060820152608081019190915260a081019390935260643560c08401528260e081015b03908101835282611437565b51902093611cf7565b80f35b8061031161030b610321938c5161175e565b51612054565b61031b828661175e565b52611f0a565b61026e565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b5091346103365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103365767ffffffffffffffff9080358281116103325761038b903690830161164b565b60243583811161032e576103a2903690840161161a565b9390926103ad6114e6565b9160643590811161049f576103c4913691016115c1565b949093835151976103d489611ebb565b98885b81811061047d5750506102f697988151610425816103f9602082018095611f66565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611437565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102ed8161141b565b808b61031b8261049461030b61049a968d5161175e565b9261175e565b6103d7565b8680fd5b5082346105bf57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325780359067ffffffffffffffff821161032e576104f49136910161161a565b929091845b848110610504578580f35b8061051a610515600193888861196c565b61197c565b61052f84610529848a8a61196c565b0161197c565b3389528385528589209173ffffffffffffffffffffffffffffffffffffffff80911692838b528652868a20911690818a5285528589207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a2016104f9565b8280fd5b50346103365760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657610676816105ff6114a0565b936106086114c3565b6106106114e6565b73ffffffffffffffffffffffffffffffffffffffff968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b50346103365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610336576106b26114a0565b906106bb6114c3565b916106c46114e6565b65ffffffffffff926064358481169081810361032a5779ffffffffffff0000000000000000000000000000000000000000947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b209873ffffffffffffffffffffffffffffffffffffffff809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146107a457504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b905092610783565b5082346105bf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf576107e56114a0565b906107ee6114c3565b9265ffffffffffff604435818116939084810361032a57338852602091600183528489209673ffffffffffffffffffffffffffffffffffffffff80911697888b528452858a20981697888a5283528489205460d01c93848711156109175761ffff9085840316116108f05750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b5084517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b503461033657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610336578060209273ffffffffffffffffffffffffffffffffffffffff61098f6114a0565b1681528084528181206024358252845220549051908152f35b5082346105bf57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610a9a5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a9a57610a606114a0565b610a686114c3565b610a706114e6565b6064359173ffffffffffffffffffffffffffffffffffffffff8316830361032e576102f6936117a1565b80fd5b503461033657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657602090610ad7611b1e565b9051908152f35b508290346105bf576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf57610b1a3661152a565b90807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c36011261033257610b4c611478565b9160e43567ffffffffffffffff8111610bda576102f694610b6f913691016115c1565b939092610b7c8351612054565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a08152610bd18161141b565b51902091611c25565b8580fd5b509134610336576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657610c186114a0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360160c08112610332576080855191610c51836113e3565b1261033257845190610c6282611398565b73ffffffffffffffffffffffffffffffffffffffff91602435838116810361049f578152604435838116810361049f57602082015265ffffffffffff606435818116810361032a5788830152608435908116810361049f576060820152815260a435938285168503610bda576020820194855260c4359087830182815260e43567ffffffffffffffff811161032657610cfe90369084016115c1565b929093804211610d88575050918591610d786102f6999a610d7e95610d238851611fbe565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610d70816113ff565b519020611bd9565b916120c7565b519251169161199d565b602492508a51917fcd21db4f000000000000000000000000000000000000000000000000000000008352820152fd5b5091346103365760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc93818536011261033257610df36114a0565b9260249081359267ffffffffffffffff9788851161032a578590853603011261049f578051978589018981108282111761104a578252848301358181116103265785019036602383011215610326578382013591610e50836115ef565b90610e5d85519283611437565b838252602093878584019160071b83010191368311611046578801905b828210610fe9575050508a526044610e93868801611509565b96838c01978852013594838b0191868352604435908111610fe557610ebb90369087016115c1565b959096804211610fba575050508998995151610ed681611ebb565b908b5b818110610f9757505092889492610d7892610f6497958351610f02816103f98682018095611f66565b5190209073ffffffffffffffffffffffffffffffffffffffff9a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610d70816113ff565b51169082515192845b848110610f78578580f35b80610f918585610f8b600195875161175e565b5161199d565b01610f6d565b80610311610fac8e9f9e93610fb2945161175e565b51611fbe565b9b9a9b610ed9565b8551917fcd21db4f000000000000000000000000000000000000000000000000000000008352820152fd5b8a80fd5b6080823603126110465785608091885161100281611398565b61100b85611509565b8152611018838601611509565b838201526110278a8601611607565b8a8201528d611037818701611607565b90820152815201910190610e7a565b8c80fd5b84896041867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5082346105bf576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf576110b03661152a565b91807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c360112610332576110e2611478565b67ffffffffffffffff93906101043585811161049f5761110590369086016115c1565b90936101243596871161032a57611125610bd1966102f6983691016115c1565b969095825190611134826113ff565b606482527f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5060208301527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848301527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608301527f696e652c0000000000000000000000000000000000000000000000000000000060808301528351948591816111e3602085018096611f93565b918237018b8152039361121c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe095868101835282611437565b5190209261122a8651612054565b6020878101518589015195519182019687526040820192909252336060820152608081019190915260a081019390935260e43560c08401528260e081016102e1565b5082346105bf576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257813567ffffffffffffffff92838211610bda5736602383011215610bda5781013592831161032e576024906007368386831b8401011161049f57865b8581106112e5578780f35b80821b83019060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83360301126103265761139288876001946060835161132c81611398565b611368608461133c8d8601611509565b9485845261134c60448201611509565b809785015261135d60648201611509565b809885015201611509565b918291015273ffffffffffffffffffffffffffffffffffffffff80808093169516931691166117a1565b016112da565b6080810190811067ffffffffffffffff8211176113b457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176113b457604052565b60a0810190811067ffffffffffffffff8211176113b457604052565b60c0810190811067ffffffffffffffff8211176113b457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176113b457604052565b60c4359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b600080fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01906080821261149b576040805190611563826113e3565b8082941261149b57805181810181811067ffffffffffffffff8211176113b457825260043573ffffffffffffffffffffffffffffffffffffffff8116810361149b578152602435602082015282526044356020830152606435910152565b9181601f8401121561149b5782359167ffffffffffffffff831161149b576020838186019501011161149b57565b67ffffffffffffffff81116113b45760051b60200190565b359065ffffffffffff8216820361149b57565b9181601f8401121561149b5782359167ffffffffffffffff831161149b576020808501948460061b01011161149b57565b91909160608184031261149b576040805191611666836113e3565b8294813567ffffffffffffffff9081811161149b57830182601f8201121561149b578035611693816115ef565b926116a087519485611437565b818452602094858086019360061b8501019381851161149b579086899897969594939201925b8484106116e3575050505050855280820135908501520135910152565b90919293949596978483031261149b578851908982019082821085831117611730578a928992845261171487611509565b81528287013583820152815201930191908897969594936116c6565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80518210156117725760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b92919273ffffffffffffffffffffffffffffffffffffffff604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611884575082871696838803611812575b5050611810955016926118b5565b565b878484161160001461184f57602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b7fffffffffffffffffffffffff000000000000000000000000000000000000000084846118109a031691161790553880611802565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b9060006064926020958295604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526004860152602485015260448401525af13d15601f3d116001600051141617161561190e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fd5b91908110156117725760061b0190565b3573ffffffffffffffffffffffffffffffffffffffff8116810361149b5790565b9065ffffffffffff908160608401511673ffffffffffffffffffffffffffffffffffffffff908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c03611af5579185611ace94927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec98979694508715600014611ad35779ffffffffffff00000000000000000000000000000000000000009042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b1617179055519384938491604091949373ffffffffffffffffffffffffffffffffffffffff606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5079ffffffffffff000000000000000000000000000000000000000087611a60565b600484517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b467f000000000000000000000000000000000000000000000000000000000000000003611b69577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a604082015246606082015230608082015260808152611bd3816113ff565b51902090565b611be1611b1e565b906040519060208201927f190100000000000000000000000000000000000000000000000000000000000084526022830152604282015260428152611bd381611398565b9192909360a435936040840151804211611cc65750602084510151808611611c955750918591610d78611c6594611c60602088015186611e47565b611bd9565b73ffffffffffffffffffffffffffffffffffffffff809151511692608435918216820361149b57611810936118b5565b602490604051907f3728b83d0000000000000000000000000000000000000000000000000000000082526004820152fd5b602490604051907fcd21db4f0000000000000000000000000000000000000000000000000000000082526004820152fd5b959093958051519560409283830151804211611e175750848803611dee57611d2e918691610d7860209b611c608d88015186611e47565b60005b868110611d42575050505050505050565b611d4d81835161175e565b5188611d5a83878a61196c565b01359089810151808311611dbe575091818888886001968596611d84575b50505050505001611d31565b611db395611dad9273ffffffffffffffffffffffffffffffffffffffff6105159351169561196c565b916118b5565b803888888883611d78565b6024908651907f3728b83d0000000000000000000000000000000000000000000000000000000082526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b6024908551907fcd21db4f0000000000000000000000000000000000000000000000000000000082526004820152fd5b9073ffffffffffffffffffffffffffffffffffffffff600160ff83161b9216600052600060205260406000209060081c6000526020526040600020818154188091551615611e9157565b60046040517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b90611ec5826115ef565b611ed26040519182611437565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611f0082946115ef565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611f375760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b805160208092019160005b828110611f7f575050505090565b835185529381019392810192600101611f71565b9081519160005b838110611fab575050016000815290565b8060208092840101518185015201611f9a565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b3678835273ffffffffffffffffffffffffffffffffffffffff8082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff8211176113b45760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a1845273ffffffffffffffffffffffffffffffffffffffff81511660408401520151606082015260608152611bd381611398565b919082604091031261149b576020823592013590565b6000843b61222e5750604182036121ac576120e4828201826120b1565b939092604010156117725760209360009360ff6040608095013560f81c5b60405194855216868401526040830152606082015282805260015afa156121a05773ffffffffffffffffffffffffffffffffffffffff806000511691821561217657160361214c57565b60046040517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b60046040517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b6040513d6000823e3d90fd5b60408203612204576121c0918101906120b1565b91601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84169360ff1c019060ff8211611f375760209360009360ff608094612102565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b929391601f928173ffffffffffffffffffffffffffffffffffffffff60646020957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0604051988997889687947f1626ba7e000000000000000000000000000000000000000000000000000000009e8f8752600487015260406024870152816044870152868601378b85828601015201168101030192165afa9081156123a857829161232a575b507fffffffff000000000000000000000000000000000000000000000000000000009150160361230057565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d82116123a0575b8161234460209383611437565b810103126103365751907fffffffff0000000000000000000000000000000000000000000000000000000082168203610a9a57507fffffffff0000000000000000000000000000000000000000000000000000000090386122d4565b3d9150612337565b6040513d84823e3d90fdfea164736f6c6343000811000a";

        (bool ok,) = permit2Deployer.call(permit2CreationCalldata);
        require(ok && permit2.code.length != 0, "permit2 deployment failed");

        anotherToken = new MockERC20("Another Mock ERC20", "MOCK2", 18);
        token = new MockERC20("Mock ERC20", "MOCK", 18);

        address immutableCreate2Factory = address(0x0000000000FFe8B47B3e2130213B802212439497);
        bytes memory immutableCreate2FactoryRuntimeCode =
            hex"60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009857806385cf97ab14610138578063a49a7c90146101bc575b600080fd5b34801561005057600080fd5b506100846004803603602081101561006757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101ec565b604080519115158252519081900360200190f35b61010f600480360360408110156100ae57600080fd5b813591908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b509092509050610217565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561014457600080fd5b5061010f6004803603604081101561015b57600080fd5b8135919081019060408101602082013564010000000081111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111640100000000831117156101b157600080fd5b509092509050610592565b3480156101c857600080fd5b5061010f600480360360408110156101df57600080fd5b508035906020013561069e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600083606081901c33148061024c57507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116155b6102a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806107746045913960600191505060405180910390fd5b606084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051855195965090943094508b93508692506020918201918291908401908083835b6020831061033557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016102f8565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183528085528251928201929092207fff000000000000000000000000000000000000000000000000000000000000008383015260609890981b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602183015260358201969096526055808201979097528251808203909701875260750182525084519484019490942073ffffffffffffffffffffffffffffffffffffffff81166000908152938490529390922054929350505060ff16156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180610735603f913960400191505060405180910390fd5b81602001825188818334f5955050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806107b96046913960600191505060405180910390fd5b50505073ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559392505050565b6000308484846040516020018083838082843760408051919093018181037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001825280845281516020928301207fff000000000000000000000000000000000000000000000000000000000000008383015260609990991b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166021820152603581019790975260558088019890985282518088039098018852607590960182525085519585019590952073ffffffffffffffffffffffffffffffffffffffff81166000908152948590529490932054939450505060ff909116159050610697575060005b9392505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b6021830152603582018590526055808301859052835180840390910181526075909201835281519181019190912073ffffffffffffffffffffffffffffffffffffffff81166000908152918290529190205460ff161561072e575060005b9291505056fe496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74726163742068617320616c7265616479206265656e206465706c6f7965642e496e76616c69642073616c74202d206669727374203230206279746573206f66207468652073616c74206d757374206d617463682063616c6c696e6720616464726573732e4661696c656420746f206465706c6f7920636f6e7472616374207573696e672070726f76696465642073616c7420616e6420696e697469616c697a6174696f6e20636f64652ea265627a7a723058202bdc55310d97c4088f18acf04253db593f0914059f0c781a9df3624dcef0d1cf64736f6c634300050a0032";
        vm.etch(immutableCreate2Factory, immutableCreate2FactoryRuntimeCode);

        // deploy using create2 (need to rederive salt and target address when changing code):
        bytes32 salt = bytes32(0x00000000000000000000000000000000000000008a0f466a78cd1102ce3d82f7);
        theCompact = TheCompact(
            ImmutableCreate2Factory(immutableCreate2Factory).safeCreate2(salt, type(TheCompact).creationCode)
        );
        // assertEq(address(theCompact), targetAddress);

        // // to deploy using standard create:
        // theCompact = new TheCompact();

        (swapper, swapperPrivateKey) = makeAddrAndKey("swapper");
        address allocatorSigningKey;
        (allocatorSigningKey, allocatorPrivateKey) = makeAddrAndKey("allocator");

        allocator = address(new SimpleAllocator(allocatorSigningKey, address(theCompact)));

        vm.deal(swapper, 2e18);
        token.mint(swapper, 1e18);
        anotherToken.mint(swapper, 1e18);

        vm.startPrank(swapper);
        token.approve(address(theCompact), 1e18);
        token.approve(permit2, 1e18);
        anotherToken.approve(address(theCompact), 1e18);
        anotherToken.approve(permit2, 1e18);
        vm.stopPrank();

        alwaysOKAllocator = address(new AlwaysOKAllocator());
    }

    function test_name() public view {
        string memory name = theCompact.name();
        assertEq(keccak256(bytes(name)), keccak256(bytes("The Compact")));
    }

    function test_domainSeparator() public view {
        bytes32 domainSeparator = keccak256(
            abi.encode(
                compactEIP712DomainHash,
                keccak256(bytes("The Compact")),
                keccak256(bytes("1")),
                block.chainid,
                address(theCompact)
            )
        );
        assertEq(domainSeparator, theCompact.DOMAIN_SEPARATOR());
    }

    function test_domainSeparatorOnNewChain() public {
        uint256 currentChainId = block.chainid;
        uint256 differentChainId = currentChainId + 42;
        bytes32 domainSeparator = keccak256(
            abi.encode(
                compactEIP712DomainHash,
                keccak256(bytes("The Compact")),
                keccak256(bytes("1")),
                differentChainId,
                address(theCompact)
            )
        );
        vm.chainId(differentChainId);
        assertEq(block.chainid, differentChainId);
        assertEq(domainSeparator, theCompact.DOMAIN_SEPARATOR());
        vm.chainId(currentChainId);
        assertEq(block.chainid, currentChainId);
    }

    function test_depositETHBasic() public {
        address recipient = swapper;
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;

        vm.prank(allocator);
        uint96 allocatorId = theCompact.__registerAllocator(allocator, "");

        bytes12 lockTag =
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)));

        vm.prank(swapper);
        uint256 id = theCompact.deposit{ value: amount }(lockTag);
        vm.snapshotGasLastCall("depositETHBasic");

        (
            address derivedToken,
            address derivedAllocator,
            ResetPeriod derivedResetPeriod,
            Scope derivedScope,
            bytes12 derivedLockTag
        ) = theCompact.getLockDetails(id);
        assertEq(derivedToken, address(0));
        assertEq(derivedAllocator, allocator);
        assertEq(uint256(derivedResetPeriod), uint256(resetPeriod));
        assertEq(uint256(derivedScope), uint256(scope));
        assertEq(
            id,
            (uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(address(0)))
        );
        assertEq(
            derivedLockTag,
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)))
        );

        assertEq(address(theCompact).balance, amount);
        assertEq(theCompact.balanceOf(recipient, id), amount);
        assert(bytes(theCompact.tokenURI(id)).length > 0);
    }

    function test_depositETHAndURI() public {
        address recipient = 0x1111111111111111111111111111111111111111;
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;

        vm.prank(allocator);
        uint96 allocatorId = theCompact.__registerAllocator(allocator, "");

        bytes12 lockTag =
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)));

        vm.prank(swapper);
        uint256 id = theCompact.deposit{ value: amount }(lockTag, recipient);
        vm.snapshotGasLastCall("depositETHAndURI");

        (
            address derivedToken,
            address derivedAllocator,
            ResetPeriod derivedResetPeriod,
            Scope derivedScope,
            bytes12 derivedLockTag
        ) = theCompact.getLockDetails(id);
        assertEq(derivedToken, address(0));
        assertEq(derivedAllocator, allocator);
        assertEq(uint256(derivedResetPeriod), uint256(resetPeriod));
        assertEq(uint256(derivedScope), uint256(scope));
        assertEq(
            id,
            (uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(address(0)))
        );
        assertEq(
            derivedLockTag,
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)))
        );

        assertEq(address(theCompact).balance, amount);
        assertEq(theCompact.balanceOf(recipient, id), amount);
        assert(bytes(theCompact.tokenURI(id)).length > 0);
    }

    function test_depositERC20Basic() public {
        address recipient = swapper;
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;

        vm.prank(allocator);
        uint96 allocatorId = theCompact.__registerAllocator(allocator, "");

        bytes12 lockTag =
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)));

        vm.prank(swapper);
        uint256 id = theCompact.deposit(address(token), lockTag, amount, swapper);
        vm.snapshotGasLastCall("depositERC20Basic");

        (
            address derivedToken,
            address derivedAllocator,
            ResetPeriod derivedResetPeriod,
            Scope derivedScope,
            bytes12 derivedLockTag
        ) = theCompact.getLockDetails(id);
        assertEq(derivedToken, address(token));
        assertEq(derivedAllocator, allocator);
        assertEq(uint256(derivedResetPeriod), uint256(resetPeriod));
        assertEq(uint256(derivedScope), uint256(scope));
        assertEq(
            id,
            (uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(address(token)))
        );
        assertEq(
            derivedLockTag,
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)))
        );

        assertEq(token.balanceOf(address(theCompact)), amount);
        assertEq(theCompact.balanceOf(recipient, id), amount);
        assert(bytes(theCompact.tokenURI(id)).length > 0);
    }

    function test_depositERC20AndURI() public {
        address recipient = 0x1111111111111111111111111111111111111111;
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;

        vm.prank(allocator);
        uint96 allocatorId = theCompact.__registerAllocator(allocator, "");

        bytes12 lockTag =
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)));

        vm.prank(swapper);
        uint256 id = theCompact.deposit(address(token), lockTag, amount, recipient);
        vm.snapshotGasLastCall("depositERC20AndURI");

        (
            address derivedToken,
            address derivedAllocator,
            ResetPeriod derivedResetPeriod,
            Scope derivedScope,
            bytes12 derivedLockTag
        ) = theCompact.getLockDetails(id);
        assertEq(derivedToken, address(token));
        assertEq(derivedAllocator, allocator);
        assertEq(uint256(derivedResetPeriod), uint256(resetPeriod));
        assertEq(uint256(derivedScope), uint256(scope));
        assertEq(
            id,
            (uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(address(token)))
        );
        assertEq(
            derivedLockTag,
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)))
        );

        assertEq(token.balanceOf(address(theCompact)), amount);
        assertEq(theCompact.balanceOf(recipient, id), amount);
        assert(bytes(theCompact.tokenURI(id)).length > 0);
    }

    function test_depositBatchSingleNativeToken() public {
        address recipient = 0x1111111111111111111111111111111111111111;
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;

        vm.prank(allocator);
        uint96 allocatorId = theCompact.__registerAllocator(allocator, "");

        uint256 id = (
            (uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(address(0)))
        );

        {
            uint256[2][] memory idsAndAmounts = new uint256[2][](1);
            idsAndAmounts[0] = [id, amount];

            vm.prank(swapper);
            bool ok = theCompact.deposit{ value: amount }(idsAndAmounts, recipient);
            vm.snapshotGasLastCall("depositBatchSingleNative");
            assert(ok);
        }

        (
            address derivedToken,
            address derivedAllocator,
            ResetPeriod derivedResetPeriod,
            Scope derivedScope,
            bytes12 lockTag
        ) = theCompact.getLockDetails(id);
        assertEq(derivedToken, address(0));
        assertEq(derivedAllocator, allocator);
        assertEq(uint256(derivedResetPeriod), uint256(resetPeriod));
        assertEq(uint256(derivedScope), uint256(scope));

        assertEq(
            id,
            (uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(address(0)))
        );
        assertEq(
            lockTag,
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)))
        );

        assertEq(address(theCompact).balance, amount);
        assertEq(theCompact.balanceOf(recipient, id), amount);
        assert(bytes(theCompact.tokenURI(id)).length > 0);
    }

    function test_depositBatchSingleERC20() public {
        address recipient = 0x1111111111111111111111111111111111111111;
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;

        vm.prank(allocator);
        uint96 allocatorId = theCompact.__registerAllocator(allocator, "");

        uint256 id = (
            (uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(address(token)))
        );

        {
            uint256[2][] memory idsAndAmounts = new uint256[2][](1);
            idsAndAmounts[0] = [id, amount];

            vm.prank(swapper);
            bool ok = theCompact.deposit(idsAndAmounts, recipient);
            vm.snapshotGasLastCall("depositBatchSingleERC20");
            assert(ok);
        }

        (
            address derivedToken,
            address derivedAllocator,
            ResetPeriod derivedResetPeriod,
            Scope derivedScope,
            bytes12 lockTag
        ) = theCompact.getLockDetails(id);
        assertEq(derivedToken, address(token));
        assertEq(derivedAllocator, allocator);
        assertEq(uint256(derivedResetPeriod), uint256(resetPeriod));
        assertEq(uint256(derivedScope), uint256(scope));

        assertEq(
            id,
            (uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(address(token)))
        );
        assertEq(
            lockTag,
            bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)))
        );

        assertEq(token.balanceOf(address(theCompact)), amount);
        assertEq(theCompact.balanceOf(recipient, id), amount);
        assert(bytes(theCompact.tokenURI(id)).length > 0);
    }

    function _createPermitWitnessDigest(
        bytes32 domainSeparator,
        address permitToken,
        uint256 amount,
        address spender,
        uint256 nonce,
        uint256 deadline,
        bytes32 witnessHash
    ) internal pure returns (bytes32) {
        return keccak256(
            abi.encodePacked(
                bytes2(0x1901),
                domainSeparator,
                keccak256(
                    abi.encode(
                        keccak256(
                            "PermitWitnessTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline,CompactDeposit witness)CompactDeposit(bytes12 lockTag,address recipient)TokenPermissions(address token,uint256 amount)"
                        ),
                        keccak256(
                            abi.encode(keccak256("TokenPermissions(address token,uint256 amount)"), permitToken, amount)
                        ),
                        spender,
                        nonce,
                        deadline,
                        witnessHash
                    )
                )
            )
        );
    }

    function test_depositERC20ViaPermit2AndURI() public virtual {
        // Setup test variables
        TestParams memory params;
        params.recipient = 0x1111111111111111111111111111111111111111;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.amount = 1e18;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Register allocator and create lock tag
        uint96 allocatorId;
        bytes12 lockTag;
        {
            vm.prank(allocator);
            allocatorId = theCompact.__registerAllocator(allocator, "");

            lockTag = bytes12(
                bytes32(
                    (uint256(params.scope) << 255) | (uint256(params.resetPeriod) << 252)
                        | (uint256(allocatorId) << 160)
                )
            );
        }

        // Create domain separator and digest
        bytes32 domainSeparator;
        bytes32 digest;
        {
            domainSeparator = keccak256(
                abi.encode(permit2EIP712DomainHash, keccak256(bytes("Permit2")), block.chainid, address(permit2))
            );

            assertEq(domainSeparator, EIP712(permit2).DOMAIN_SEPARATOR());

            bytes32 witnessHash = keccak256(
                abi.encode(keccak256("CompactDeposit(bytes12 lockTag,address recipient)"), lockTag, params.recipient)
            );

            digest = _createPermitWitnessDigest(
                domainSeparator,
                address(token),
                params.amount,
                address(theCompact),
                params.nonce,
                params.deadline,
                witnessHash
            );
        }

        // Create signature and permit
        bytes memory signature;
        ISignatureTransfer.PermitTransferFrom memory permit;
        {
            (bytes32 r, bytes32 vs) = vm.signCompact(swapperPrivateKey, digest);
            signature = abi.encodePacked(r, vs);

            permit = ISignatureTransfer.PermitTransferFrom({
                permitted: ISignatureTransfer.TokenPermissions({ token: address(token), amount: params.amount }),
                nonce: params.nonce,
                deadline: params.deadline
            });
        }

        // Setup expectations and make deposit
        uint256 id;
        {
            bytes32 witnessHash = keccak256(
                abi.encode(keccak256("CompactDeposit(bytes12 lockTag,address recipient)"), lockTag, params.recipient)
            );

            vm.expectCall(
                address(permit2),
                abi.encodeWithSignature(
                    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
                    permit,
                    ISignatureTransfer.SignatureTransferDetails({
                        to: address(theCompact),
                        requestedAmount: params.amount
                    }),
                    swapper,
                    witnessHash,
                    "CompactDeposit witness)CompactDeposit(bytes12 lockTag,address recipient)TokenPermissions(address token,uint256 amount)",
                    signature
                )
            );

            id = theCompact.deposit(permit, swapper, lockTag, params.recipient, signature);
            vm.snapshotGasLastCall("depositERC20ViaPermit2AndURI");
        }

        // Verify lock details
        {
            LockDetails memory lockDetails;
            (lockDetails.token, lockDetails.allocator, lockDetails.resetPeriod, lockDetails.scope, lockDetails.lockTag)
            = theCompact.getLockDetails(id);

            assertEq(lockDetails.token, address(token));
            assertEq(lockDetails.allocator, allocator);
            assertEq(uint256(lockDetails.resetPeriod), uint256(params.resetPeriod));
            assertEq(uint256(lockDetails.scope), uint256(params.scope));
            assertEq(
                id,
                (uint256(params.scope) << 255) | (uint256(params.resetPeriod) << 252) | (uint256(allocatorId) << 160)
                    | uint256(uint160(address(token)))
            );
            assertEq(lockDetails.lockTag, lockTag);
        }

        // Verify balances and token URI
        {
            assertEq(token.balanceOf(address(theCompact)), params.amount);
            assertEq(theCompact.balanceOf(params.recipient, id), params.amount);
            assert(bytes(theCompact.tokenURI(id)).length > 0);
        }
    }

    function _verifyLockDetails(
        uint256 id,
        TestParams memory params,
        LockDetails memory expectedDetails,
        uint96 allocatorId
    ) internal {
        LockDetails memory actualDetails;

        (
            actualDetails.token,
            actualDetails.allocator,
            actualDetails.resetPeriod,
            actualDetails.scope,
            actualDetails.lockTag
        ) = theCompact.getLockDetails(id);

        assertEq(actualDetails.token, expectedDetails.token);
        assertEq(actualDetails.allocator, expectedDetails.allocator);
        assertEq(uint256(actualDetails.resetPeriod), uint256(params.resetPeriod));
        assertEq(uint256(actualDetails.scope), uint256(params.scope));
        assertEq(
            id,
            (uint256(params.scope) << 255) | (uint256(params.resetPeriod) << 252) | (uint256(allocatorId) << 160)
                | uint256(uint160(expectedDetails.token))
        );
        assertEq(actualDetails.lockTag, expectedDetails.lockTag);
    }

    function test_depositBatchViaPermit2SingleERC20() public virtual {
        // Setup test variables
        TestParams memory params;
        params.recipient = 0x1111111111111111111111111111111111111111;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.amount = 1e18;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Register allocator and create lock tag
        uint96 allocatorId;
        bytes12 lockTag;
        {
            (allocatorId, lockTag) = _registerAllocator(allocator);
        }

        // Create domain separator
        bytes32 domainSeparator;
        {
            domainSeparator = keccak256(
                abi.encode(permit2EIP712DomainHash, keccak256(bytes("Permit2")), block.chainid, address(permit2))
            );

            assertEq(domainSeparator, EIP712(permit2).DOMAIN_SEPARATOR());
        }

        // Prepare tokens and amounts arrays
        address[] memory tokens;
        uint256[] memory amounts;
        {
            tokens = new address[](1);
            amounts = new uint256[](1);
            tokens[0] = address(token);
            amounts[0] = params.amount;
        }

        // Create signature and token permissions
        bytes memory signature;
        ISignatureTransfer.PermitBatchTransferFrom memory permit;
        ISignatureTransfer.SignatureTransferDetails[] memory signatureTransferDetails;

        {
            ISignatureTransfer.TokenPermissions[] memory tokenPermissions;
            {
                (signature, tokenPermissions) = _createPermit2BatchSignature(
                    tokens, amounts, params.nonce, params.deadline, lockTag, params.recipient, swapperPrivateKey
                );
            }

            // Create permit and transfer details
            {
                signatureTransferDetails = new ISignatureTransfer.SignatureTransferDetails[](1);
                signatureTransferDetails[0] = ISignatureTransfer.SignatureTransferDetails({
                    to: address(theCompact),
                    requestedAmount: params.amount
                });

                permit = ISignatureTransfer.PermitBatchTransferFrom({
                    permitted: tokenPermissions,
                    nonce: params.nonce,
                    deadline: params.deadline
                });
            }
        }

        uint256[] memory ids;

        {
            // Prepare deposit details and expectations
            DepositDetails memory details;

            {
                details = DepositDetails({ nonce: params.nonce, deadline: params.deadline, lockTag: lockTag });

                bytes32 witnessHash = keccak256(
                    abi.encode(
                        keccak256("CompactDeposit(bytes12 lockTag,address recipient)"), lockTag, params.recipient
                    )
                );

                vm.expectCall(
                    address(permit2),
                    abi.encodeWithSignature(
                        "permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)",
                        permit,
                        signatureTransferDetails,
                        swapper,
                        witnessHash,
                        "CompactDeposit witness)CompactDeposit(bytes12 lockTag,address recipient)TokenPermissions(address token,uint256 amount)",
                        signature
                    )
                );
            }

            // Make deposit
            {
                ids = theCompact.deposit(swapper, permit.permitted, details, params.recipient, signature);
                vm.snapshotGasLastCall("depositBatchViaPermit2SingleERC20");

                assertEq(ids.length, 1);
            }
        }

        // Verify lock details
        {
            LockDetails memory expectedDetails;
            expectedDetails.token = address(token);
            expectedDetails.allocator = allocator;
            expectedDetails.resetPeriod = params.resetPeriod;
            expectedDetails.scope = params.scope;
            expectedDetails.lockTag = lockTag;

            _verifyLockDetails(ids[0], params, expectedDetails, allocatorId);
        }

        // Verify balances and token URI
        {
            assertEq(token.balanceOf(address(theCompact)), params.amount);
            assertEq(theCompact.balanceOf(params.recipient, ids[0]), params.amount);
            assert(bytes(theCompact.tokenURI(ids[0])).length > 0);
        }
    }

    function test_depositBatchViaPermit2NativeAndERC20() public virtual {
        // Setup test variables
        TestParams memory params;
        params.recipient = 0x1111111111111111111111111111111111111111;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.amount = 1e18;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Register allocator and create lock tag
        uint96 allocatorId;
        bytes12 lockTag;
        {
            (allocatorId, lockTag) = _registerAllocator(allocator);
        }

        // Create domain separator
        bytes32 domainSeparator;
        {
            domainSeparator = keccak256(
                abi.encode(permit2EIP712DomainHash, keccak256(bytes("Permit2")), block.chainid, address(permit2))
            );

            assertEq(domainSeparator, EIP712(permit2).DOMAIN_SEPARATOR());
        }

        // Prepare tokens and amounts arrays
        address[] memory tokens;
        uint256[] memory amounts;
        {
            tokens = new address[](2);
            amounts = new uint256[](2);
            tokens[0] = address(0);
            amounts[0] = params.amount;
            tokens[1] = address(token);
            amounts[1] = params.amount;
        }

        // Create signature and token permissions
        bytes memory signature;
        ISignatureTransfer.TokenPermissions[] memory tokenPermissions;
        {
            (signature, tokenPermissions) = _createPermit2BatchSignature(
                tokens, amounts, params.nonce, params.deadline, lockTag, params.recipient, swapperPrivateKey
            );
        }

        uint256[] memory ids;

        {
            {
                // Create permit and transfer details for the ERC20 token
                ISignatureTransfer.SignatureTransferDetails[] memory signatureTransferDetails;
                ISignatureTransfer.PermitBatchTransferFrom memory permitOnCall;
                {
                    ISignatureTransfer.TokenPermissions[] memory tokenPermissionsOnCall;
                    {
                        tokenPermissionsOnCall = new ISignatureTransfer.TokenPermissions[](1);
                        tokenPermissionsOnCall[0] =
                            ISignatureTransfer.TokenPermissions({ token: address(token), amount: params.amount });
                    }

                    {
                        signatureTransferDetails = new ISignatureTransfer.SignatureTransferDetails[](1);
                        signatureTransferDetails[0] = ISignatureTransfer.SignatureTransferDetails({
                            to: address(theCompact),
                            requestedAmount: params.amount
                        });
                    }

                    {
                        permitOnCall = ISignatureTransfer.PermitBatchTransferFrom({
                            permitted: tokenPermissionsOnCall,
                            nonce: params.nonce,
                            deadline: params.deadline
                        });
                    }
                }

                bytes32 witnessHash;
                {
                    witnessHash = keccak256(
                        abi.encode(
                            keccak256("CompactDeposit(bytes12 lockTag,address recipient)"), lockTag, params.recipient
                        )
                    );

                    vm.expectCall(
                        address(permit2),
                        abi.encodeWithSignature(
                            "permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)",
                            permitOnCall,
                            signatureTransferDetails,
                            swapper,
                            witnessHash,
                            "CompactDeposit witness)CompactDeposit(bytes12 lockTag,address recipient)TokenPermissions(address token,uint256 amount)",
                            signature
                        )
                    );
                }
            }

            // Make deposit
            {
                DepositDetails memory details =
                    DepositDetails({ nonce: params.nonce, deadline: params.deadline, lockTag: lockTag });

                ids = theCompact.deposit{ value: params.amount }(
                    swapper, tokenPermissions, details, params.recipient, signature
                );
                vm.snapshotGasLastCall("depositBatchViaPermit2NativeAndERC20");

                assertEq(ids.length, 2);
            }
        }

        // Verify lock details for ETH (native token)
        {
            LockDetails memory expectedDetails;
            expectedDetails.token = address(0);
            expectedDetails.allocator = allocator;
            expectedDetails.resetPeriod = params.resetPeriod;
            expectedDetails.scope = params.scope;
            expectedDetails.lockTag = lockTag;

            _verifyLockDetails(ids[0], params, expectedDetails, allocatorId);
        }

        // Verify id for ERC20 token
        {
            assertEq(
                ids[1],
                (uint256(params.scope) << 255) | (uint256(params.resetPeriod) << 252) | (uint256(allocatorId) << 160)
                    | uint256(uint160(address(token)))
            );
        }

        // Verify balances and token URIs
        {
            assertEq(token.balanceOf(address(theCompact)), params.amount);
            assertEq(address(theCompact).balance, params.amount);
            assertEq(theCompact.balanceOf(params.recipient, ids[0]), params.amount);
            assertEq(theCompact.balanceOf(params.recipient, ids[1]), params.amount);
            assert(bytes(theCompact.tokenURI(ids[0])).length > 0);
        }
    }

    function test_splitTransfer() public {
        // Setup test parameters
        TestParams memory params;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.amount = 1e18;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Recipient information
        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x2222222222222222222222222222222222222222;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;

        // Register allocator and create lock tag
        uint256 id;
        {
            uint96 allocatorId;
            bytes12 lockTag;
            (allocatorId, lockTag) = _registerAllocator(allocator);

            // Make deposit
            id = _makeDeposit(swapper, address(token), params.amount, lockTag);
        }

        // Create digest and allocator signature
        bytes memory allocatorData;
        {
            bytes32 claimHash =
                _createClaimHash(compactTypehash, swapper, swapper, params.nonce, params.deadline, id, params.amount);

            bytes32 digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

            bytes32 r;
            bytes32 vs;
            (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
            allocatorData = abi.encodePacked(r, vs);
        }

        // Prepare recipients
        SplitComponent[] memory recipients;
        {
            uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientOne), (uint256));
            uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientTwo), (uint256));

            SplitComponent memory splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });
            SplitComponent memory splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

            recipients = new SplitComponent[](2);
            recipients[0] = splitOne;
            recipients[1] = splitTwo;
        }

        // Create and execute transfer
        SplitTransfer memory transfer = SplitTransfer({
            nonce: params.nonce,
            expires: params.deadline,
            allocatorData: allocatorData,
            id: id,
            recipients: recipients
        });

        vm.prank(swapper);
        bool status = theCompact.allocatedTransfer(transfer);
        vm.snapshotGasLastCall("splitTransfer");
        assert(status);

        // Verify balances
        assertEq(token.balanceOf(address(theCompact)), params.amount);
        assertEq(token.balanceOf(recipientOne), 0);
        assertEq(theCompact.balanceOf(swapper, id), 0);
        assertEq(theCompact.balanceOf(recipientOne, id), amountOne);
        assertEq(theCompact.balanceOf(recipientTwo, id), amountTwo);
    }

    function test_qualified_basicTransfer() public {
        // Setup test parameters
        TestParams memory params;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.amount = 1e18;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;
        params.recipient = 0x1111111111111111111111111111111111111111;

        // Setup qualified allocator
        uint256 id;
        {
            allocator = address(new QualifiedAllocator(vm.addr(allocatorPrivateKey), address(theCompact)));

            // Register allocator and create lock tag
            uint96 allocatorId;
            bytes12 lockTag;
            (allocatorId, lockTag) = _registerAllocator(allocator);

            // Make deposit
            id = _makeDeposit(swapper, address(token), params.amount, lockTag);
        }

        // Create qualified digest and allocator signature
        bytes memory allocatorData;
        bytes32 qualificationArgument;
        bytes32 claimHash;
        {
            claimHash =
                _createClaimHash(compactTypehash, swapper, swapper, params.nonce, params.deadline, id, params.amount);

            qualificationArgument = keccak256("qualification");

            {
                bytes32 qualifiedDigest;
                {
                    bytes32 qualifiedHash = keccak256(
                        abi.encode(
                            keccak256("QualifiedClaim(bytes32 claimHash,bytes32 qualificationArg)"),
                            claimHash,
                            qualificationArgument
                        )
                    );

                    qualifiedDigest = _createDigest(theCompact.DOMAIN_SEPARATOR(), qualifiedHash);
                }

                bytes32 r;
                bytes32 vs;
                (r, vs) = vm.signCompact(allocatorPrivateKey, qualifiedDigest);
                allocatorData = abi.encodePacked(r, vs);
            }
        }

        // Prepare recipients
        SplitComponent[] memory recipients;
        {
            uint256 claimant = abi.decode(abi.encodePacked(bytes12(bytes32(id)), params.recipient), (uint256));

            SplitComponent memory split = SplitComponent({ claimant: claimant, amount: params.amount });

            recipients = new SplitComponent[](1);
            recipients[0] = split;
        }

        // Create and execute transfer
        bool status;
        {
            SplitTransfer memory transfer = SplitTransfer({
                nonce: params.nonce,
                expires: params.deadline,
                allocatorData: abi.encode(allocatorData, qualificationArgument),
                id: id,
                recipients: recipients
            });

            vm.prank(swapper);
            status = theCompact.allocatedTransfer(transfer);
            vm.snapshotGasLastCall("qualified_basicTransfer");
            assert(status);
        }

        // Verify balances
        {
            assertEq(token.balanceOf(address(theCompact)), params.amount);
            assertEq(token.balanceOf(params.recipient), 0);
            assertEq(theCompact.balanceOf(swapper, id), 0);
            assertEq(theCompact.balanceOf(params.recipient, id), params.amount);
        }
    }

    function test_splitWithdrawal() public {
        // Setup test parameters
        TestParams memory params;
        params.amount = 1e18;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Recipient information
        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x2222222222222222222222222222222222222222;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;

        // Register allocator and create lock tag
        uint256 id;
        {
            (, bytes12 lockTag) = _registerAllocator(allocator);

            // Make deposit
            id = _makeDeposit(swapper, address(token), params.amount, lockTag);
        }

        // Create digest and allocator signature
        bytes memory allocatorData;
        {
            bytes32 digest;
            {
                bytes32 claimHash = _createClaimHash(
                    compactTypehash, swapper, swapper, params.nonce, params.deadline, id, params.amount
                );

                digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);
            }

            bytes32 r;
            bytes32 vs;
            (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
            allocatorData = abi.encodePacked(r, vs);
        }

        // Prepare recipients
        SplitComponent[] memory recipients;
        {
            uint256 claimantOne;
            uint256 claimantTwo;
            {
                claimantOne = abi.decode(abi.encodePacked(bytes12(0), recipientOne), (uint256));
                claimantTwo = abi.decode(abi.encodePacked(bytes12(0), recipientTwo), (uint256));
            }

            {
                SplitComponent memory splitOne;
                SplitComponent memory splitTwo;

                splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });
                splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

                recipients = new SplitComponent[](2);
                recipients[0] = splitOne;
                recipients[1] = splitTwo;
            }
        }

        // Create and execute transfer
        {
            SplitTransfer memory transfer;
            {
                transfer = SplitTransfer({
                    nonce: params.nonce,
                    expires: params.deadline,
                    allocatorData: allocatorData,
                    id: id,
                    recipients: recipients
                });
            }

            {
                vm.prank(swapper);
                bool status = theCompact.allocatedTransfer(transfer);
                vm.snapshotGasLastCall("splitWithdrawal");
                assert(status);
            }
        }

        // Verify balances
        {
            assertEq(token.balanceOf(address(theCompact)), 0);
            assertEq(token.balanceOf(recipientOne), amountOne);
            assertEq(token.balanceOf(recipientTwo), amountTwo);
            assertEq(theCompact.balanceOf(swapper, id), 0);
            assertEq(theCompact.balanceOf(recipientOne, id), 0);
            assertEq(theCompact.balanceOf(recipientTwo, id), 0);
        }
    }

    function test_splitBatchTransfer() public {
        // Setup test parameters
        TestParams memory params;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Amount information
        uint256 amountOne = 1e18;
        uint256 amountTwo = 6e17;
        uint256 amountThree = 4e17;

        // Recipient information
        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x2222222222222222222222222222222222222222;

        // Register allocator and make deposits
        uint256 idOne;
        uint256 idTwo;
        {
            uint96 allocatorId;
            bytes12 lockTag;
            (allocatorId, lockTag) = _registerAllocator(allocator);

            idOne = _makeDeposit(swapper, address(token), amountOne, lockTag);
            idTwo = _makeDeposit(swapper, amountTwo + amountThree, lockTag);

            assertEq(theCompact.balanceOf(swapper, idOne), amountOne);
            assertEq(theCompact.balanceOf(swapper, idTwo), amountTwo + amountThree);
        }

        // Create idsAndAmounts array
        uint256[2][] memory idsAndAmounts;
        {
            idsAndAmounts = new uint256[2][](2);
            idsAndAmounts[0] = [idOne, amountOne];
            idsAndAmounts[1] = [idTwo, amountTwo + amountThree];
        }

        // Create digest and allocator signature
        bytes memory allocatorData;
        {
            bytes32 digest;
            {
                bytes32 batchCompactHash = keccak256(
                    abi.encode(
                        keccak256(
                            "BatchCompact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256[2][] idsAndAmounts)"
                        ),
                        swapper,
                        swapper,
                        params.nonce,
                        params.deadline,
                        keccak256(abi.encodePacked(idsAndAmounts))
                    )
                );

                digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), batchCompactHash);
            }

            bytes32 r;
            bytes32 vs;
            (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
            allocatorData = abi.encodePacked(r, vs);
        }

        // Prepare transfers
        SplitBatchTransfer memory transfer;
        SplitByIdComponent[] memory transfers = new SplitByIdComponent[](2);
        {
            SplitComponent[] memory portionsOne;

            uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(bytes32(idOne)), recipientOne), (uint256));

            portionsOne = new SplitComponent[](1);
            portionsOne[0] = SplitComponent({ claimant: claimantOne, amount: amountOne });

            transfers[0] = SplitByIdComponent({ id: idOne, portions: portionsOne });
        }

        {
            SplitComponent[] memory portionsTwo;
            uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(bytes32(idTwo)), recipientOne), (uint256));
            uint256 claimantThree = abi.decode(abi.encodePacked(bytes12(bytes32(idTwo)), recipientTwo), (uint256));

            portionsTwo = new SplitComponent[](2);
            portionsTwo[0] = SplitComponent({ claimant: claimantTwo, amount: amountTwo });
            portionsTwo[1] = SplitComponent({ claimant: claimantThree, amount: amountThree });

            transfers[1] = SplitByIdComponent({ id: idTwo, portions: portionsTwo });
        }

        {
            // Create batch transfer
            transfer = SplitBatchTransfer({
                nonce: params.nonce,
                expires: params.deadline,
                allocatorData: allocatorData,
                transfers: transfers
            });
        }

        // Execute transfer
        {
            vm.prank(swapper);
            bool status = theCompact.allocatedTransfer(transfer);
            vm.snapshotGasLastCall("splitBatchTransfer");
            assert(status);
        }

        // Verify balances
        assertEq(token.balanceOf(recipientOne), 0);
        assertEq(token.balanceOf(recipientTwo), 0);
        assertEq(theCompact.balanceOf(swapper, idOne), 0);
        assertEq(theCompact.balanceOf(swapper, idTwo), 0);
        assertEq(theCompact.balanceOf(recipientOne, idOne), amountOne);
        assertEq(theCompact.balanceOf(recipientOne, idTwo), amountTwo);
        assertEq(theCompact.balanceOf(recipientTwo, idTwo), amountThree);
    }

    function test_splitBatchWithdrawal() public {
        // Setup test parameters
        TestParams memory params;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Amount information
        uint256 amountOne = 1e18;
        uint256 amountTwo = 6e17;
        uint256 amountThree = 4e17;

        // Recipient information
        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x2222222222222222222222222222222222222222;

        // Register allocator and make deposits
        uint256 idOne;
        uint256 idTwo;
        {
            uint96 allocatorId;
            bytes12 lockTag;
            (allocatorId, lockTag) = _registerAllocator(allocator);

            idOne = _makeDeposit(swapper, address(token), amountOne, lockTag);
            idTwo = _makeDeposit(swapper, amountTwo + amountThree, lockTag);

            assertEq(theCompact.balanceOf(swapper, idOne), amountOne);
            assertEq(theCompact.balanceOf(swapper, idTwo), amountTwo + amountThree);
        }

        // Create idsAndAmounts array
        uint256[2][] memory idsAndAmounts;
        {
            idsAndAmounts = new uint256[2][](2);
            idsAndAmounts[0] = [idOne, amountOne];
            idsAndAmounts[1] = [idTwo, amountTwo + amountThree];
        }

        // Create digest and allocator signature
        bytes memory allocatorData;
        {
            bytes32 digest;
            {
                bytes32 batchCompactHash = keccak256(
                    abi.encode(
                        keccak256(
                            "BatchCompact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256[2][] idsAndAmounts)"
                        ),
                        swapper,
                        swapper,
                        params.nonce,
                        params.deadline,
                        keccak256(abi.encodePacked(idsAndAmounts))
                    )
                );

                digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), batchCompactHash);
            }

            bytes32 r;
            bytes32 vs;
            (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
            allocatorData = abi.encodePacked(r, vs);
        }

        // Prepare transfers
        SplitBatchTransfer memory transfer;
        SplitByIdComponent[] memory transfers = new SplitByIdComponent[](2);
        {
            // First transfer
            {
                SplitComponent[] memory portionsOne;
                uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(0), recipientOne), (uint256));

                portionsOne = new SplitComponent[](1);
                portionsOne[0] = SplitComponent({ claimant: claimantOne, amount: amountOne });

                transfers[0] = SplitByIdComponent({ id: idOne, portions: portionsOne });
            }

            // Second transfer
            {
                SplitComponent[] memory portionsTwo;
                uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(0), recipientOne), (uint256));
                uint256 claimantThree = abi.decode(abi.encodePacked(bytes12(0), recipientTwo), (uint256));

                portionsTwo = new SplitComponent[](2);
                portionsTwo[0] = SplitComponent({ claimant: claimantTwo, amount: amountTwo });
                portionsTwo[1] = SplitComponent({ claimant: claimantThree, amount: amountThree });

                transfers[1] = SplitByIdComponent({ id: idTwo, portions: portionsTwo });
            }

            // Create batch transfer
            {
                transfer = SplitBatchTransfer({
                    nonce: params.nonce,
                    expires: params.deadline,
                    allocatorData: allocatorData,
                    transfers: transfers
                });
            }
        }

        // Execute transfer
        {
            vm.prank(swapper);
            bool status = theCompact.allocatedTransfer(transfer);
            vm.snapshotGasLastCall("splitBatchWithdrawal");
            assert(status);
        }

        // Verify balances
        assertEq(token.balanceOf(recipientOne), amountOne);
        assertEq(token.balanceOf(recipientTwo), 0);
        assertEq(recipientOne.balance, amountTwo);
        assertEq(recipientTwo.balance, amountThree);
        assertEq(theCompact.balanceOf(swapper, idOne), 0);
        assertEq(theCompact.balanceOf(swapper, idTwo), 0);
        assertEq(theCompact.balanceOf(recipientOne, idOne), 0);
        assertEq(theCompact.balanceOf(recipientOne, idTwo), 0);
        assertEq(theCompact.balanceOf(recipientTwo, idTwo), 0);
    }

    function test_registerAndClaim() public {
        Claim memory claim;
        claim.sponsor = swapper;
        claim.nonce = 0;
        claim.expires = block.timestamp + 1000;
        claim.allocatedAmount = 1e18;

        address arbiter = 0x2222222222222222222222222222222222222222;
        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x3333333333333333333333333333333333333333;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;

        {
            (, bytes12 lockTag) = _registerAllocator(allocator);

            claim.id = _makeDeposit(swapper, claim.allocatedAmount, lockTag);
            claim.witness = _createCompactWitness(234);
        }

        bytes32 claimHash;
        {
            CreateClaimHashWithWitnessArgs memory args;
            args.typehash = compactWithWitnessTypehash;
            args.arbiter = arbiter;
            args.sponsor = claim.sponsor;
            args.nonce = claim.nonce;
            args.expires = claim.expires;
            args.id = claim.id;
            args.amount = claim.allocatedAmount;
            args.witness = claim.witness;

            claimHash = _createClaimHashWithWitness(args);
        }

        bytes32 digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

        {
            (bytes32 r, bytes32 vs) = vm.signCompact(allocatorPrivateKey, digest);
            claim.allocatorData = abi.encodePacked(r, vs);
        }

        uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(bytes32(claim.id)), recipientOne), (uint256));
        uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(bytes32(claim.id)), recipientTwo), (uint256));

        SplitComponent[] memory recipients;
        {
            SplitComponent memory splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });

            SplitComponent memory splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

            recipients = new SplitComponent[](2);
            recipients[0] = splitOne;
            recipients[1] = splitTwo;
        }

        claim.sponsorSignature = "";
        claim.witnessTypestring = witnessTypestring;
        claim.claimants = recipients;

        vm.prank(swapper);
        {
            (bool status) = theCompact.register(claimHash, compactWithWitnessTypehash);
            vm.snapshotGasLastCall("register");
            assert(status);
        }

        {
            (bool isActive, uint256 registeredAt) =
                theCompact.getRegistrationStatus(swapper, claimHash, compactWithWitnessTypehash);
            assert(isActive);
            assertEq(registeredAt, block.timestamp);
        }

        vm.prank(arbiter);
        (bytes32 returnedClaimHash) = theCompact.claim(claim);
        vm.snapshotGasLastCall("claim");
        assertEq(returnedClaimHash, claimHash);

        assertEq(address(theCompact).balance, claim.allocatedAmount);
        assertEq(recipientOne.balance, 0);
        assertEq(recipientTwo.balance, 0);
        assertEq(theCompact.balanceOf(swapper, claim.id), 0);
        assertEq(theCompact.balanceOf(recipientOne, claim.id), amountOne);
        assertEq(theCompact.balanceOf(recipientTwo, claim.id), amountTwo);
    }

    function test_registerForAndClaim() public {
        // Setup test parameters
        TestParams memory params;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.amount = 1e18;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;
        params.recipient = 0x1111111111111111111111111111111111111111;

        // Additional parameters
        address arbiter = 0x2222222222222222222222222222222222222222;
        address swapperSponsor = makeAddr("swapperSponsor");

        // Register allocator and setup tokens
        uint256 id;
        bytes12 lockTag;
        {
            uint96 allocatorId;
            (allocatorId, lockTag) = _registerAllocator(allocator);

            vm.prank(swapper);
            token.transfer(swapperSponsor, params.amount);

            vm.prank(swapperSponsor);
            token.approve(address(theCompact), params.amount);
        }

        // Create witness and deposit/register
        bytes32 registeredClaimHash;
        bytes32 witness;
        uint256 witnessArgument = 234;
        {
            witness = keccak256(abi.encode(witnessArgument));

            vm.prank(swapperSponsor);
            (id, registeredClaimHash) = theCompact.depositAndRegisterFor(
                address(swapper),
                address(token),
                lockTag,
                params.amount,
                arbiter,
                params.nonce,
                params.deadline,
                compactWithWitnessTypehash,
                witness
            );
            vm.snapshotGasLastCall("depositRegisterFor");

            assertEq(theCompact.balanceOf(swapper, id), params.amount);
            assertEq(token.balanceOf(address(theCompact)), params.amount);
        }

        // Verify claim hash
        bytes32 claimHash;
        {
            CreateClaimHashWithWitnessArgs memory args;
            args.typehash = compactWithWitnessTypehash;
            args.arbiter = arbiter;
            args.sponsor = swapper;
            args.nonce = params.nonce;
            args.expires = params.deadline;
            args.id = id;
            args.amount = params.amount;
            args.witness = witness;

            claimHash = _createClaimHashWithWitness(args);
            assertEq(registeredClaimHash, claimHash);

            {
                bool isActive;
                uint256 registeredAt;
                (isActive, registeredAt) =
                    theCompact.getRegistrationStatus(swapper, claimHash, compactWithWitnessTypehash);
                assert(isActive);
                assertEq(registeredAt, block.timestamp);
            }
        }

        // Prepare claim
        Claim memory claim;
        {
            // Create digest and get allocator signature
            bytes memory allocatorSignature;
            {
                bytes32 digest = keccak256(abi.encodePacked(bytes2(0x1901), theCompact.DOMAIN_SEPARATOR(), claimHash));

                bytes32 r;
                bytes32 vs;
                (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
                allocatorSignature = abi.encodePacked(r, vs);
            }

            // Create recipients
            SplitComponent[] memory recipients;
            {
                recipients = new SplitComponent[](1);

                uint256 claimantId = uint256(bytes32(abi.encodePacked(bytes12(bytes32(id)), params.recipient)));

                recipients[0] = SplitComponent({ claimant: claimantId, amount: params.amount });
            }

            // Build the claim
            claim = Claim(
                allocatorSignature,
                "", // sponsorSignature
                swapper,
                params.nonce,
                params.deadline,
                witness,
                witnessTypestring,
                id,
                params.amount,
                recipients
            );
        }

        // Execute claim
        {
            vm.prank(arbiter);
            bytes32 returnedClaimHash = theCompact.claim(claim);
            assertEq(returnedClaimHash, claimHash);
        }

        // Verify balances
        assertEq(token.balanceOf(address(theCompact)), params.amount);
        assertEq(theCompact.balanceOf(swapper, id), 0);
        assertEq(theCompact.balanceOf(params.recipient, id), params.amount);
    }

    function test_claimAndWithdraw() public {
        // Initialize claim struct
        Claim memory claim;
        claim.sponsor = swapper;
        claim.nonce = 0;
        claim.expires = block.timestamp + 1000;
        claim.allocatedAmount = 1e18;

        // Recipient information
        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x3333333333333333333333333333333333333333;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;
        address arbiter = 0x2222222222222222222222222222222222222222;

        // Register allocator, make deposit and create witness
        {
            bytes12 lockTag;
            {
                uint96 allocatorId;
                (allocatorId, lockTag) = _registerAllocator(allocator);
            }

            claim.id = _makeDeposit(swapper, claim.allocatedAmount, lockTag);
            claim.witness = _createCompactWitness(234);
        }

        // Create claim hash
        bytes32 claimHash;
        {
            CreateClaimHashWithWitnessArgs memory args;
            args.typehash = compactWithWitnessTypehash;
            args.arbiter = arbiter;
            args.sponsor = claim.sponsor;
            args.nonce = claim.nonce;
            args.expires = claim.expires;
            args.id = claim.id;
            args.amount = claim.allocatedAmount;
            args.witness = claim.witness;

            claimHash = _createClaimHashWithWitness(args);
        }

        // Create signatures
        bytes32 digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

        {
            bytes32 r;
            bytes32 vs;

            // Create sponsor signature
            {
                (r, vs) = vm.signCompact(swapperPrivateKey, digest);
                claim.sponsorSignature = abi.encodePacked(r, vs);
            }

            // Create allocator signature
            {
                (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
                claim.allocatorData = abi.encodePacked(r, vs);
            }
        }

        // Prepare recipients
        {
            uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(0), recipientOne), (uint256));
            uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(0), recipientTwo), (uint256));

            SplitComponent[] memory recipients;
            {
                SplitComponent memory splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });
                SplitComponent memory splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

                recipients = new SplitComponent[](2);
                recipients[0] = splitOne;
                recipients[1] = splitTwo;
            }

            claim.witnessTypestring = witnessTypestring;
            claim.claimants = recipients;
        }

        // Execute claim
        bytes32 returnedClaimHash;
        {
            vm.prank(arbiter);
            returnedClaimHash = theCompact.claim(claim);
            vm.snapshotGasLastCall("claimAndWithdraw");
            assertEq(returnedClaimHash, claimHash);
        }

        // Verify balances
        assertEq(address(theCompact).balance, 0);
        assertEq(recipientOne.balance, amountOne);
        assertEq(recipientTwo.balance, amountTwo);
        assertEq(theCompact.balanceOf(swapper, claim.id), 0);
        assertEq(theCompact.balanceOf(recipientOne, claim.id), 0);
        assertEq(theCompact.balanceOf(recipientTwo, claim.id), 0);
    }

    function test_depositAndRegisterWithWitnessViaPermit2ThenClaim() public virtual {
        // Setup test parameters
        TestParams memory params;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.amount = 1e18;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Initialize claim
        Claim memory claim;
        claim.sponsor = swapper;
        claim.nonce = params.nonce;
        claim.expires = block.timestamp + 1000;
        claim.allocatedAmount = params.amount;
        claim.witnessTypestring = witnessTypestring;
        claim.sponsorSignature = "";

        // Create domain separator
        bytes32 domainSeparator;
        {
            domainSeparator = keccak256(
                abi.encode(permit2EIP712DomainHash, keccak256(bytes("Permit2")), block.chainid, address(permit2))
            );
            assertEq(domainSeparator, EIP712(permit2).DOMAIN_SEPARATOR());
        }

        // Create witness and id
        LockDetails memory expectedDetails;
        uint96 allocatorId;
        {
            // Register allocator and setup
            bytes12 lockTag;
            {
                (allocatorId, lockTag) = _registerAllocator(allocator);
            }
            expectedDetails.lockTag = lockTag;

            uint256 witnessArgument = 234;
            claim.witness = _createCompactWitness(witnessArgument);
            claim.id = uint256(bytes32(lockTag)) | uint256(uint160(address(token)));
        }

        // Create claim hash
        bytes32 claimHash;
        {
            CreateClaimHashWithWitnessArgs memory args;
            args.typehash = compactWithWitnessTypehash;
            args.arbiter = 0x2222222222222222222222222222222222222222;
            args.sponsor = claim.sponsor;
            args.nonce = claim.nonce;
            args.expires = claim.expires;
            args.id = claim.id;
            args.amount = claim.allocatedAmount;
            args.witness = claim.witness;

            claimHash = _createClaimHashWithWitness(args);
        }

        // Create activation typehash and permit signature
        bytes memory signature;
        ISignatureTransfer.PermitTransferFrom memory permit;
        {
            bytes32 activationTypehash =
                keccak256(bytes(string.concat("Activation(uint256 id,Compact compact)", compactWitnessTypestring)));

            {
                bytes32 tokenPermissionsHash = keccak256(
                    abi.encode(
                        keccak256("TokenPermissions(address token,uint256 amount)"), address(token), params.amount
                    )
                );

                bytes32 permitWitnessHash;
                {
                    bytes32 activationHash = keccak256(abi.encode(activationTypehash, claim.id, claimHash));

                    permitWitnessHash = keccak256(
                        abi.encode(
                            keccak256(
                                "PermitWitnessTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline,Activation witness)Activation(uint256 id,Compact compact)Compact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256 id,uint256 amount,CompactWitness witness)CompactWitness(uint256 witnessArgument)TokenPermissions(address token,uint256 amount)"
                            ),
                            tokenPermissionsHash,
                            address(theCompact), // spender
                            params.nonce,
                            params.deadline,
                            activationHash
                        )
                    );
                }

                bytes32 digest = keccak256(abi.encodePacked(bytes2(0x1901), domainSeparator, permitWitnessHash));

                bytes32 r;
                bytes32 vs;
                (r, vs) = vm.signCompact(swapperPrivateKey, digest);
                signature = abi.encodePacked(r, vs);
            }

            // Create permit
            {
                permit = ISignatureTransfer.PermitTransferFrom({
                    permitted: ISignatureTransfer.TokenPermissions({ token: address(token), amount: params.amount }),
                    nonce: params.nonce,
                    deadline: params.deadline
                });
            }

            // Setup expectation for permitWitnessTransferFrom call
            {
                bytes32 activationHash = keccak256(abi.encode(activationTypehash, claim.id, claimHash));

                vm.expectCall(
                    address(permit2),
                    abi.encodeWithSignature(
                        "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
                        permit,
                        ISignatureTransfer.SignatureTransferDetails({
                            to: address(theCompact),
                            requestedAmount: params.amount
                        }),
                        swapper,
                        activationHash,
                        "Activation witness)Activation(uint256 id,Compact compact)Compact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256 id,uint256 amount,CompactWitness witness)CompactWitness(uint256 witnessArgument)TokenPermissions(address token,uint256 amount)",
                        signature
                    )
                );
            }
        }

        // Deposit and register
        {
            uint256 returnedId = theCompact.depositAndRegister(
                permit,
                swapper,
                expectedDetails.lockTag,
                claimHash,
                CompactCategory.Compact,
                witnessTypestring,
                signature
            );
            vm.snapshotGasLastCall("depositAndRegisterViaPermit2");
            assertEq(returnedId, claim.id);

            bool isActive;
            uint256 registeredAt;
            (isActive, registeredAt) = theCompact.getRegistrationStatus(swapper, claimHash, compactWithWitnessTypehash);
            assert(isActive);
            assertEq(registeredAt, block.timestamp);
        }

        // Verify lock details
        {
            expectedDetails.token = address(token);
            expectedDetails.allocator = allocator;
            expectedDetails.resetPeriod = params.resetPeriod;
            expectedDetails.scope = params.scope;

            _verifyLockDetails(claim.id, params, expectedDetails, allocatorId);

            assertEq(token.balanceOf(address(theCompact)), params.amount);
            assertEq(theCompact.balanceOf(swapper, claim.id), params.amount);
        }

        // Create allocator signature
        {
            bytes32 digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

            bytes32 r;
            bytes32 vs;
            (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
            claim.allocatorData = abi.encodePacked(r, vs);
        }

        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;

        // Create split components
        {
            uint256 claimantOne = abi.decode(
                abi.encodePacked(bytes12(bytes32(claim.id)), 0x1111111111111111111111111111111111111111), (uint256)
            );
            uint256 claimantTwo = abi.decode(
                abi.encodePacked(bytes12(bytes32(claim.id)), 0x3333333333333333333333333333333333333333), (uint256)
            );

            SplitComponent[] memory recipients;
            {
                SplitComponent memory splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });
                SplitComponent memory splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

                recipients = new SplitComponent[](2);
                recipients[0] = splitOne;
                recipients[1] = splitTwo;

                claim.claimants = recipients;
            }
        }

        // Execute claim
        bytes32 returnedClaimHash;
        {
            vm.prank(0x2222222222222222222222222222222222222222);
            returnedClaimHash = theCompact.claim(claim);
            vm.snapshotGasLastCall("claim");
            assertEq(returnedClaimHash, claimHash);
        }

        // Verify balances
        assertEq(token.balanceOf(address(theCompact)), params.amount);
        assertEq(theCompact.balanceOf(swapper, claim.id), 0);
        assertEq(theCompact.balanceOf(0x1111111111111111111111111111111111111111, claim.id), amountOne);
        assertEq(theCompact.balanceOf(0x3333333333333333333333333333333333333333, claim.id), amountTwo);
    }

    function test_batchDepositAndRegisterWithWitnessViaPermit2ThenClaim() public virtual {
        // Setup test parameters
        TestParams memory params;
        params.resetPeriod = ResetPeriod.TenMinutes;
        params.scope = Scope.Multichain;
        params.nonce = 0;
        params.deadline = block.timestamp + 1000;

        // Initialize claim data
        BatchClaim memory claim;
        claim.sponsor = swapper;
        claim.nonce = params.nonce;
        claim.expires = block.timestamp + 1000;
        claim.witnessTypestring = witnessTypestring;

        // Register allocator and setup basic variables
        uint96 allocatorId;
        bytes12 lockTag;
        {
            (allocatorId, lockTag) = _registerAllocator(allocator);
        }

        // Create domain separator
        bytes32 domainSeparator;
        {
            domainSeparator = keccak256(
                abi.encode(permit2EIP712DomainHash, keccak256(bytes("Permit2")), block.chainid, address(permit2))
            );
            assertEq(domainSeparator, EIP712(permit2).DOMAIN_SEPARATOR());
        }

        // Create witness and typestring
        bytes32 typehash;
        {
            claim.witness = _createCompactWitness(234);

            string memory typestring =
                "BatchCompact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)";
            typehash = keccak256(bytes(typestring));
        }

        // Create ids and idsAndAmounts
        uint256[] memory ids;
        uint256[2][] memory idsAndAmounts;
        {
            uint256 id = (uint256(params.scope) << 255) | (uint256(params.resetPeriod) << 252)
                | (uint256(allocatorId) << 160) | uint256(uint160(address(0)));
            uint256 anotherId = (uint256(params.scope) << 255) | (uint256(params.resetPeriod) << 252)
                | (uint256(allocatorId) << 160) | uint256(uint160(address(token)));
            uint256 aThirdId = (uint256(params.scope) << 255) | (uint256(params.resetPeriod) << 252)
                | (uint256(allocatorId) << 160) | uint256(uint160(address(anotherToken)));

            ids = new uint256[](3);
            idsAndAmounts = new uint256[2][](3);

            ids[0] = id;
            ids[1] = anotherId;
            ids[2] = aThirdId;

            idsAndAmounts[0][0] = id;
            idsAndAmounts[0][1] = 1e18; // amount
            idsAndAmounts[1][0] = anotherId;
            idsAndAmounts[1][1] = 1e18; // anotherAmount
            idsAndAmounts[2][0] = aThirdId;
            idsAndAmounts[2][1] = 1e18; // aThirdAmount
        }

        // Create claim hash
        bytes32 claimHash;
        {
            CreateBatchClaimHashWithWitnessArgs memory args;
            {
                args.typehash = typehash;
                args.arbiter = 0x2222222222222222222222222222222222222222;
                args.sponsor = claim.sponsor;
                args.nonce = params.nonce;
                args.expires = claim.expires;
                args.idsAndAmountsHash = keccak256(abi.encodePacked(idsAndAmounts));
                args.witness = claim.witness;
            }

            claimHash = _createBatchClaimHashWithWitness(args);
        }

        // Create activation typehash
        bytes32 activationTypehash;
        {
            string memory typestring =
                "BatchCompact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)";
            activationTypehash =
                keccak256(bytes(string.concat("BatchActivation(uint256[] ids,BatchCompact compact)", typestring)));
        }

        // Create token permissions and signature
        ISignatureTransfer.TokenPermissions[] memory tokenPermissions;
        bytes memory signature;
        {
            tokenPermissions = new ISignatureTransfer.TokenPermissions[](3);
            tokenPermissions[0] = ISignatureTransfer.TokenPermissions({ token: address(0), amount: 1e18 });
            tokenPermissions[1] = ISignatureTransfer.TokenPermissions({ token: address(token), amount: 1e18 });
            tokenPermissions[2] = ISignatureTransfer.TokenPermissions({ token: address(anotherToken), amount: 1e18 });

            // Create signature
            {
                bytes32 tokenPermissionsHash;
                {
                    bytes32[] memory tokenPermissionsHashes = new bytes32[](2);

                    tokenPermissionsHashes[0] = keccak256(
                        abi.encode(keccak256("TokenPermissions(address token,uint256 amount)"), tokenPermissions[0])
                    );
                    tokenPermissionsHashes[0] = keccak256(
                        abi.encode(keccak256("TokenPermissions(address token,uint256 amount)"), tokenPermissions[1])
                    );
                    tokenPermissionsHashes[1] = keccak256(
                        abi.encode(keccak256("TokenPermissions(address token,uint256 amount)"), tokenPermissions[2])
                    );

                    tokenPermissionsHash = keccak256(abi.encodePacked(tokenPermissionsHashes));
                }

                bytes32 digest;
                {
                    CreatePermitBatchWitnessDigestArgs memory args;
                    {
                        args.domainSeparator = domainSeparator;
                        args.tokenPermissionsHash = tokenPermissionsHash;
                        args.spender = address(theCompact);
                        args.nonce = params.nonce;
                        args.deadline = params.deadline;
                        args.activationTypehash = activationTypehash;
                        args.idsHash = keccak256(abi.encodePacked(ids));
                        args.claimHash = claimHash;
                    }

                    digest = _createPermitBatchWitnessDigest(args);
                }

                bytes32 r;
                bytes32 vs;
                (r, vs) = vm.signCompact(swapperPrivateKey, digest);
                signature = abi.encodePacked(r, vs);
            }
        }

        {
            SetupPermitCallExpectationArgs memory args;
            args.activationTypehash = activationTypehash;
            args.ids = ids;
            args.claimHash = claimHash;
            args.nonce = params.nonce;
            args.deadline = params.deadline;
            args.signature = signature;

            _setupPermitCallExpectation(args);
        }

        // Deposit and register
        uint256[] memory returnedIds;
        {
            DepositDetails memory depositDetails;
            depositDetails.nonce = params.nonce;
            depositDetails.deadline = params.deadline;
            depositDetails.lockTag = lockTag;

            returnedIds = theCompact.depositAndRegister{ value: 1e18 }(
                swapper,
                tokenPermissions,
                depositDetails,
                claimHash,
                CompactCategory.BatchCompact,
                witnessTypestring,
                signature
            );
            vm.snapshotGasLastCall("batchDepositAndRegisterWithWitnessViaPermit2");

            assertEq(returnedIds.length, 3);
            assertEq(returnedIds[0], ids[0]);
            assertEq(returnedIds[1], ids[1]);
            assertEq(returnedIds[2], ids[2]);

            assertEq(theCompact.balanceOf(swapper, ids[0]), 1e18);
            assertEq(theCompact.balanceOf(swapper, ids[1]), 1e18);
            assertEq(theCompact.balanceOf(swapper, ids[2]), 1e18);

            bool isActive;
            uint256 registeredAt;
            (isActive, registeredAt) = theCompact.getRegistrationStatus(swapper, claimHash, typehash);
            assert(isActive);
            assertEq(registeredAt, block.timestamp);
        }

        // Regenerate claim hash
        {
            CreateBatchClaimHashWithWitnessArgs memory args;
            {
                args.typehash = keccak256(
                    "BatchCompact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                );
                args.arbiter = 0x2222222222222222222222222222222222222222;
                args.sponsor = swapper;
                args.nonce = params.nonce;
                args.expires = claim.expires;
                args.idsAndAmountsHash = keccak256(abi.encodePacked(idsAndAmounts));
                args.witness = claim.witness;
            }

            claimHash = _createBatchClaimHashWithWitness(args);
        }

        // Create signatures for claim
        {
            bytes32 digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

            {
                bytes32 r;
                bytes32 vs;
                (r, vs) = vm.signCompact(swapperPrivateKey, digest);
                claim.sponsorSignature = abi.encodePacked(r, vs);
            }

            {
                bytes32 r;
                bytes32 vs;
                (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
                claim.allocatorData = abi.encodePacked(r, vs);
            }
        }

        // Create claim components
        {
            SplitBatchClaimComponent[] memory claims = new SplitBatchClaimComponent[](3);
            {
                uint256 claimantOne = abi.decode(
                    abi.encodePacked(bytes12(bytes32(ids[0])), 0x1111111111111111111111111111111111111111), (uint256)
                );
                uint256 claimantTwo = abi.decode(
                    abi.encodePacked(bytes12(bytes32(ids[0])), 0x3333333333333333333333333333333333333333), (uint256)
                );
                uint256 claimantThree = abi.decode(
                    abi.encodePacked(bytes12(bytes32(ids[1])), 0x1111111111111111111111111111111111111111), (uint256)
                );
                uint256 claimantFour = abi.decode(
                    abi.encodePacked(bytes12(bytes32(ids[2])), 0x3333333333333333333333333333333333333333), (uint256)
                );

                {
                    SplitComponent[] memory portions = new SplitComponent[](2);
                    portions[0] = SplitComponent({ claimant: claimantOne, amount: 4e17 });
                    portions[1] = SplitComponent({ claimant: claimantTwo, amount: 6e17 });
                    claims[0] = SplitBatchClaimComponent({ id: ids[0], allocatedAmount: 1e18, portions: portions });
                }

                {
                    SplitComponent[] memory anotherPortion = new SplitComponent[](1);
                    anotherPortion[0] = SplitComponent({ claimant: claimantThree, amount: 1e18 });
                    claims[1] =
                        SplitBatchClaimComponent({ id: ids[1], allocatedAmount: 1e18, portions: anotherPortion });
                }

                {
                    SplitComponent[] memory aThirdPortion = new SplitComponent[](1);
                    aThirdPortion[0] = SplitComponent({ claimant: claimantFour, amount: 1e18 });
                    claims[2] = SplitBatchClaimComponent({ id: ids[2], allocatedAmount: 1e18, portions: aThirdPortion });
                }
            }

            claim.claims = claims;
        }

        // Execute claim
        bytes32 returnedClaimHash;
        {
            vm.prank(0x2222222222222222222222222222222222222222);
            returnedClaimHash = theCompact.claim(claim);
            vm.snapshotGasLastCall("batchClaimRegisteredWithDepositWithWitness");
            assertEq(returnedClaimHash, claimHash);
        }

        // Verify balances
        assertEq(address(theCompact).balance, 1e18);
        assertEq(token.balanceOf(address(theCompact)), 1e18);
        assertEq(anotherToken.balanceOf(address(theCompact)), 1e18);

        assertEq(theCompact.balanceOf(0x1111111111111111111111111111111111111111, ids[0]), 4e17);
        assertEq(theCompact.balanceOf(0x3333333333333333333333333333333333333333, ids[0]), 6e17);
        assertEq(theCompact.balanceOf(0x1111111111111111111111111111111111111111, ids[1]), 1e18);
        assertEq(theCompact.balanceOf(0x3333333333333333333333333333333333333333, ids[2]), 1e18);
    }

    // TODO: here's the progress now

    function test_splitClaimWithWitness() public {
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;
        uint256 nonce = 0;
        uint256 expires = block.timestamp + 1000;
        address arbiter = 0x2222222222222222222222222222222222222222;
        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x3333333333333333333333333333333333333333;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;

        (uint96 allocatorId, bytes12 lockTag) = _registerAllocator(allocator);

        uint256 id = _makeDeposit(swapper, amount, lockTag);
        uint256 witnessArgument = 234;
        bytes32 witness = keccak256(abi.encode(witnessArgument));

        CreateClaimHashWithWitnessArgs memory args;
        args.typehash = compactWithWitnessTypehash;
        args.arbiter = arbiter;
        args.sponsor = swapper;
        args.nonce = nonce;
        args.expires = expires;
        args.id = id;
        args.amount = amount;
        args.witness = witness;

        bytes32 claimHash = _createClaimHashWithWitness(args);

        bytes32 digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

        (bytes32 r, bytes32 vs) = vm.signCompact(swapperPrivateKey, digest);
        bytes memory sponsorSignature = abi.encodePacked(r, vs);

        (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
        bytes memory allocatorData = abi.encodePacked(r, vs);

        uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientOne), (uint256));
        uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientTwo), (uint256));

        SplitComponent memory splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });

        SplitComponent memory splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

        SplitComponent[] memory recipients = new SplitComponent[](2);
        recipients[0] = splitOne;
        recipients[1] = splitTwo;

        Claim memory claim = Claim(
            allocatorData, sponsorSignature, swapper, nonce, expires, witness, witnessTypestring, id, amount, recipients
        );

        vm.prank(arbiter);
        (bytes32 returnedClaimHash) = theCompact.claim(claim);
        vm.snapshotGasLastCall("splitClaimWithWitness");
        assertEq(returnedClaimHash, claimHash);

        assertEq(address(theCompact).balance, amount);
        assertEq(recipientOne.balance, 0);
        assertEq(recipientTwo.balance, 0);
        assertEq(theCompact.balanceOf(swapper, id), 0);

        assertEq(theCompact.balanceOf(recipientOne, id), amountOne);
        assertEq(theCompact.balanceOf(recipientTwo, id), amountTwo);
    }

    function test_splitBatchClaimWithWitness() public {
        uint256 amount = 1e18;
        uint256 anotherAmount = 1e18;
        uint256 aThirdAmount = 1e18;
        uint256 nonce = 0;
        uint256 expires = block.timestamp + 1000;
        address arbiter = 0x2222222222222222222222222222222222222222;

        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x3333333333333333333333333333333333333333;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;

        (uint96 allocatorId, bytes12 lockTag) = _registerAllocator(allocator);

        uint256 id = _makeDeposit(swapper, amount, lockTag);
        uint256 anotherId = _makeDeposit(swapper, address(token), anotherAmount, lockTag);
        uint256 aThirdId = _makeDeposit(swapper, address(anotherToken), aThirdAmount, lockTag);

        assertEq(theCompact.balanceOf(swapper, id), amount);
        assertEq(theCompact.balanceOf(swapper, anotherId), anotherAmount);
        assertEq(theCompact.balanceOf(swapper, aThirdId), aThirdAmount);

        uint256[2][] memory idsAndAmounts = new uint256[2][](3);
        idsAndAmounts[0] = [id, amount];
        idsAndAmounts[1] = [anotherId, anotherAmount];
        idsAndAmounts[2] = [aThirdId, aThirdAmount];

        uint256 witnessArgument = 234;
        bytes32 witness = keccak256(abi.encode(witnessArgument));

        bytes32 claimHash = keccak256(
            abi.encode(
                keccak256(
                    "BatchCompact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                ),
                arbiter,
                swapper,
                nonce,
                expires,
                keccak256(abi.encodePacked(idsAndAmounts)),
                witness
            )
        );

        bytes32 digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

        (bytes32 r, bytes32 vs) = vm.signCompact(swapperPrivateKey, digest);
        bytes memory sponsorSignature = abi.encodePacked(r, vs);

        (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
        bytes memory allocatorData = abi.encodePacked(r, vs);

        uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientOne), (uint256));
        uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientTwo), (uint256));
        uint256 claimantThree = abi.decode(abi.encodePacked(bytes12(bytes32(anotherId)), recipientOne), (uint256));
        uint256 claimantFour = abi.decode(abi.encodePacked(bytes12(bytes32(aThirdId)), recipientTwo), (uint256));

        SplitBatchClaimComponent[] memory claims = new SplitBatchClaimComponent[](3);
        SplitComponent[] memory portions = new SplitComponent[](2);
        portions[0] = SplitComponent({ claimant: claimantOne, amount: amountOne });
        portions[1] = SplitComponent({ claimant: claimantTwo, amount: amountTwo });
        claims[0] = SplitBatchClaimComponent({ id: id, allocatedAmount: amount, portions: portions });
        SplitComponent[] memory anotherPortion = new SplitComponent[](1);
        anotherPortion[0] = SplitComponent({ claimant: claimantThree, amount: anotherAmount });
        claims[1] =
            SplitBatchClaimComponent({ id: anotherId, allocatedAmount: anotherAmount, portions: anotherPortion });
        SplitComponent[] memory aThirdPortion = new SplitComponent[](1);
        aThirdPortion[0] = SplitComponent({ claimant: claimantFour, amount: aThirdAmount });
        claims[2] = SplitBatchClaimComponent({ id: aThirdId, allocatedAmount: aThirdAmount, portions: aThirdPortion });

        BatchClaim memory claim =
            BatchClaim(allocatorData, sponsorSignature, swapper, nonce, expires, witness, witnessTypestring, claims);

        vm.prank(arbiter);
        (bytes32 returnedClaimHash) = theCompact.claim(claim);
        vm.snapshotGasLastCall("splitBatchClaimWithWitness");
        assertEq(returnedClaimHash, claimHash);

        assertEq(address(theCompact).balance, amount);
        assertEq(token.balanceOf(address(theCompact)), anotherAmount);
        assertEq(anotherToken.balanceOf(address(theCompact)), aThirdAmount);

        assertEq(theCompact.balanceOf(recipientOne, id), amountOne);
        assertEq(theCompact.balanceOf(recipientTwo, id), amountTwo);
        assertEq(theCompact.balanceOf(recipientOne, anotherId), anotherAmount);
        assertEq(theCompact.balanceOf(recipientTwo, aThirdId), aThirdAmount);
    }

    function test_splitMultichainClaimWithWitness() public {
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;
        uint256 anotherAmount = 1e18;
        uint256 nonce = 0;
        uint256 expires = block.timestamp + 1000;
        address arbiter = 0x2222222222222222222222222222222222222222;
        uint256 anotherChainId = 7171717;

        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x3333333333333333333333333333333333333333;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;

        (uint96 allocatorId, bytes12 lockTag) = _registerAllocator(allocator);

        uint256 id = _makeDeposit(swapper, amount, lockTag);
        uint256 anotherId = _makeDeposit(swapper, address(token), anotherAmount, lockTag);

        uint256[2][] memory idsAndAmountsOne = new uint256[2][](1);
        idsAndAmountsOne[0] = [id, amount];

        uint256[2][] memory idsAndAmountsTwo = new uint256[2][](1);
        idsAndAmountsTwo[0] = [anotherId, anotherAmount];

        uint256 witnessArgument = 234;
        bytes32 witness = keccak256(abi.encode(witnessArgument));

        bytes32 allocationHashOne = keccak256(
            abi.encode(
                keccak256(
                    "Segment(address arbiter,uint256 chainId,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                ),
                arbiter,
                block.chainid,
                keccak256(abi.encodePacked(idsAndAmountsOne)),
                witness
            )
        );

        bytes32 allocationHashTwo = keccak256(
            abi.encode(
                keccak256(
                    "Segment(address arbiter,uint256 chainId,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                ),
                arbiter,
                anotherChainId,
                keccak256(abi.encodePacked(idsAndAmountsTwo)),
                witness
            )
        );

        bytes32 allocationHashThree = keccak256(
            abi.encode(
                keccak256(
                    "Segment(address arbiter,uint256 chainId,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                ),
                arbiter,
                41414141,
                keccak256(abi.encodePacked(idsAndAmountsTwo)),
                witness
            )
        );

        bytes32 claimHash = keccak256(
            abi.encode(
                keccak256(
                    "MultichainCompact(address sponsor,uint256 nonce,uint256 expires,Segment[] segments)Segment(address arbiter,uint256 chainId,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                ),
                swapper,
                nonce,
                expires,
                keccak256(abi.encodePacked(allocationHashOne, allocationHashTwo, allocationHashThree))
            )
        );

        bytes32 initialDomainSeparator = theCompact.DOMAIN_SEPARATOR();
        bytes32 digest = _createDigest(initialDomainSeparator, claimHash);

        (bytes32 r, bytes32 vs) = vm.signCompact(swapperPrivateKey, digest);
        bytes memory sponsorSignature = abi.encodePacked(r, vs);

        (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
        bytes memory allocatorData = abi.encodePacked(r, vs);

        bytes32[] memory additionalChains = new bytes32[](2);
        additionalChains[0] = allocationHashTwo;
        additionalChains[1] = allocationHashThree;

        uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientOne), (uint256));
        uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientTwo), (uint256));

        SplitComponent memory splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });

        SplitComponent memory splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

        SplitComponent[] memory recipients = new SplitComponent[](2);
        recipients[0] = splitOne;
        recipients[1] = splitTwo;

        MultichainClaim memory claim = MultichainClaim(
            allocatorData,
            sponsorSignature,
            swapper,
            nonce,
            expires,
            witness,
            witnessTypestring,
            additionalChains,
            id,
            amount,
            recipients
        );

        uint256 snapshotId = vm.snapshotState();
        vm.prank(arbiter);
        (bytes32 returnedClaimHash) = theCompact.claim(claim);
        vm.snapshotGasLastCall("splitMultichainClaimWithWitness");
        assertEq(returnedClaimHash, claimHash);

        assertEq(address(theCompact).balance, amount);
        assertEq(recipientOne.balance, 0);
        assertEq(recipientTwo.balance, 0);
        assertEq(theCompact.balanceOf(recipientOne, id), amountOne);
        assertEq(theCompact.balanceOf(recipientTwo, id), amountTwo);
        vm.revertToAndDelete(snapshotId);

        // change to "new chain" (this hack is so the original one gets stored)
        uint256 notarizedChainId = abi.decode(abi.encode(block.chainid), (uint256));
        assert(notarizedChainId != anotherChainId);
        vm.chainId(anotherChainId);
        assertEq(block.chainid, anotherChainId);
        assert(notarizedChainId != anotherChainId);

        bytes32 anotherDomainSeparator = theCompact.DOMAIN_SEPARATOR();

        assert(initialDomainSeparator != anotherDomainSeparator);

        digest = _createDigest(anotherDomainSeparator, claimHash);

        (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
        bytes memory exogenousallocatorData = abi.encodePacked(r, vs);

        additionalChains[0] = allocationHashOne;
        additionalChains[1] = allocationHashThree;
        uint256 chainIndex = 0;

        ExogenousMultichainClaim memory anotherClaim = ExogenousMultichainClaim(
            exogenousallocatorData,
            sponsorSignature,
            swapper,
            nonce,
            expires,
            witness,
            witnessTypestring,
            additionalChains,
            chainIndex,
            notarizedChainId,
            anotherId,
            anotherAmount,
            recipients
        );

        vm.prank(arbiter);
        (returnedClaimHash) = theCompact.claim(anotherClaim);
        vm.snapshotGasLastCall("exogenousSplitMultichainClaimWithWitness");
        assertEq(returnedClaimHash, claimHash);

        assertEq(theCompact.balanceOf(swapper, anotherId), 0);
        assertEq(theCompact.balanceOf(recipientOne, anotherId), amountOne);
        assertEq(theCompact.balanceOf(recipientTwo, anotherId), amountTwo);

        // change back
        vm.chainId(notarizedChainId);
        assertEq(block.chainid, notarizedChainId);
    }

    function test_splitBatchMultichainClaimWithWitness() public {
        uint256 amount = 1e18;
        uint256 anotherAmount = 1e18;
        uint256 aThirdAmount = 1e18;
        uint256 expires = block.timestamp + 1000;
        address arbiter = 0x2222222222222222222222222222222222222222;

        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x3333333333333333333333333333333333333333;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;

        (uint96 allocatorId, bytes12 lockTag) = _registerAllocator(allocator);

        uint256 id = _makeDeposit(swapper, amount, lockTag);

        uint256 anotherId = _makeDeposit(swapper, address(token), anotherAmount, lockTag);
        assertEq(theCompact.balanceOf(swapper, anotherId), anotherAmount);

        uint256 aThirdId = _makeDeposit(swapper, address(anotherToken), aThirdAmount, lockTag);
        assertEq(theCompact.balanceOf(swapper, aThirdId), aThirdAmount);

        vm.stopPrank();

        assertEq(theCompact.balanceOf(swapper, id), amount);
        assertEq(theCompact.balanceOf(swapper, anotherId), anotherAmount);
        assertEq(theCompact.balanceOf(swapper, aThirdId), aThirdAmount);

        uint256[2][] memory idsAndAmounts = new uint256[2][](3);
        idsAndAmounts[0] = [id, amount];
        idsAndAmounts[1] = [anotherId, anotherAmount];
        idsAndAmounts[2] = [aThirdId, aThirdAmount];

        uint256 anotherChainId = 7171717;

        uint256[2][] memory idsAndAmountsOne = new uint256[2][](1);
        idsAndAmountsOne[0] = [id, amount];

        uint256[2][] memory idsAndAmountsTwo = new uint256[2][](2);
        idsAndAmountsTwo[0] = [anotherId, anotherAmount];
        idsAndAmountsTwo[1] = [aThirdId, aThirdAmount];

        uint256 witnessArgument = 234;
        bytes32 witness = keccak256(abi.encode(witnessArgument));

        bytes32 allocationHashOne = keccak256(
            abi.encode(
                keccak256(
                    "Segment(address arbiter,uint256 chainId,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                ),
                arbiter,
                block.chainid,
                keccak256(abi.encodePacked(idsAndAmountsOne)),
                witness
            )
        );

        bytes32 allocationHashTwo = keccak256(
            abi.encode(
                keccak256(
                    "Segment(address arbiter,uint256 chainId,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                ),
                arbiter,
                anotherChainId,
                keccak256(abi.encodePacked(idsAndAmountsTwo)),
                witness
            )
        );

        bytes32[] memory additionalChains = new bytes32[](1);
        additionalChains[0] = allocationHashTwo;

        bytes32 claimHash = keccak256(
            abi.encode(
                keccak256(
                    "MultichainCompact(address sponsor,uint256 nonce,uint256 expires,Segment[] segments)Segment(address arbiter,uint256 chainId,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)"
                ),
                swapper,
                0,
                expires,
                keccak256(abi.encodePacked(allocationHashOne, allocationHashTwo))
            )
        );

        bytes32 initialDomainSeparator = theCompact.DOMAIN_SEPARATOR();

        bytes32 digest = keccak256(abi.encodePacked(bytes2(0x1901), theCompact.DOMAIN_SEPARATOR(), claimHash));

        (bytes32 r, bytes32 vs) = vm.signCompact(swapperPrivateKey, digest);
        bytes memory sponsorSignature = abi.encodePacked(r, vs);

        (r, vs) = vm.signCompact(allocatorPrivateKey, digest);

        SplitBatchClaimComponent[] memory claims = new SplitBatchClaimComponent[](1);
        SplitComponent[] memory recipients = new SplitComponent[](2);

        {
            uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientOne), (uint256));
            uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(bytes32(id)), recipientTwo), (uint256));

            SplitComponent memory splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });

            SplitComponent memory splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

            recipients[0] = splitOne;
            recipients[1] = splitTwo;

            claims[0] = SplitBatchClaimComponent({ id: id, allocatedAmount: amount, portions: recipients });
        }

        BatchMultichainClaim memory claim;
        claim.sponsorSignature = sponsorSignature;

        {
            uint256 snapshotId = vm.snapshotState();

            claim.allocatorData = abi.encodePacked(r, vs);
            claim.sponsor = swapper;
            claim.nonce = 0;
            claim.expires = expires;
            claim.witness = witness;
            claim.witnessTypestring = witnessTypestring;
            claim.additionalChains = additionalChains;
            claim.claims = claims;

            vm.prank(arbiter);
            (bytes32 returnedClaimHash) = theCompact.claim(claim);
            vm.snapshotGasLastCall("splitBatchMultichainClaimWithWitness");
            assertEq(returnedClaimHash, claimHash);

            assertEq(address(theCompact).balance, amount);
            assertEq(recipientOne.balance, 0);
            assertEq(recipientTwo.balance, 0);
            assertEq(theCompact.balanceOf(swapper, id), 0);
            assertEq(theCompact.balanceOf(recipientOne, id), amountOne);
            assertEq(theCompact.balanceOf(recipientTwo, id), amountTwo);
            vm.revertToStateAndDelete(snapshotId);
        }

        // change to "new chain" (this hack is so the original one gets stored)
        uint256 notarizedChainId = abi.decode(abi.encode(block.chainid), (uint256));
        assert(notarizedChainId != anotherChainId);
        vm.chainId(anotherChainId);
        assertEq(block.chainid, anotherChainId);
        assert(notarizedChainId != anotherChainId);

        assert(initialDomainSeparator != theCompact.DOMAIN_SEPARATOR());

        digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

        (r, vs) = vm.signCompact(allocatorPrivateKey, digest);

        additionalChains[0] = allocationHashOne;

        {
            uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(bytes32(anotherId)), recipientOne), (uint256));
            uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(bytes32(anotherId)), recipientTwo), (uint256));
            recipients[0].claimant = claimantOne;
            recipients[1].claimant = claimantTwo;

            uint256 claimantThree = abi.decode(abi.encodePacked(bytes12(bytes32(aThirdId)), recipientOne), (uint256));

            SplitComponent memory anotherSplit = SplitComponent({ claimant: claimantThree, amount: anotherAmount });

            SplitComponent[] memory anotherRecipient = new SplitComponent[](1);
            anotherRecipient[0] = anotherSplit;

            claims = new SplitBatchClaimComponent[](2);
            claims[0] =
                SplitBatchClaimComponent({ id: anotherId, allocatedAmount: anotherAmount, portions: anotherRecipient });
            claims[1] = SplitBatchClaimComponent({ id: aThirdId, allocatedAmount: aThirdAmount, portions: recipients });
        }

        ExogenousBatchMultichainClaim memory anotherClaim;
        anotherClaim.allocatorData = abi.encodePacked(r, vs);
        anotherClaim.sponsorSignature = sponsorSignature;
        anotherClaim.witnessTypestring = "CompactWitness witness)CompactWitness(uint256 witnessArgument)";
        anotherClaim.additionalChains = additionalChains;

        {
            anotherClaim.sponsor = swapper;
            anotherClaim.nonce = 0;
            anotherClaim.expires = expires;
            anotherClaim.witness = witness;
            anotherClaim.chainIndex = 0;
            anotherClaim.notarizedChainId = notarizedChainId;
            anotherClaim.claims = claims;
        }

        {
            vm.prank(arbiter);
            (bytes32 returnedClaimHash) = theCompact.claim(anotherClaim);
            vm.snapshotGasLastCall("exogenousSplitBatchMultichainClaimWithWitness");
            assertEq(returnedClaimHash, claimHash);
        }

        assertEq(theCompact.balanceOf(swapper, anotherId), 0);
        assertEq(theCompact.balanceOf(recipientOne, anotherId), anotherAmount);
        assertEq(theCompact.balanceOf(recipientOne, aThirdId), amountOne);
        assertEq(theCompact.balanceOf(recipientTwo, aThirdId), amountTwo);

        // change back
        vm.chainId(notarizedChainId);
        assertEq(block.chainid, notarizedChainId);
    }

    function test_claimAndWithdraw_withEmissary() public {
        ResetPeriod resetPeriod = ResetPeriod.TenMinutes;
        Scope scope = Scope.Multichain;
        uint256 amount = 1e18;
        uint256 nonce = 0;
        uint256 expires = block.timestamp + 1000;
        address recipientOne = 0x1111111111111111111111111111111111111111;
        address recipientTwo = 0x3333333333333333333333333333333333333333;
        uint256 amountOne = 4e17;
        uint256 amountTwo = 6e17;
        address arbiter = 0x2222222222222222222222222222222222222222;

        (uint96 allocatorId, bytes12 lockTag) = _registerAllocator(allocator);

        address emissary = address(new AlwaysOKEmissary());
        vm.prank(swapper);
        theCompact.assignEmissary(lockTag, emissary);

        uint256 id = _makeDeposit(swapper, amount, lockTag);
        bytes32 witness = _createCompactWitness(234);

        CreateClaimHashWithWitnessArgs memory args;
        args.typehash = compactWithWitnessTypehash;
        args.arbiter = arbiter;
        args.sponsor = swapper;
        args.nonce = nonce;
        args.expires = expires;
        args.id = id;
        args.amount = amount;
        args.witness = witness;

        bytes32 claimHash = _createClaimHashWithWitness(args);

        bytes32 digest = _createDigest(theCompact.DOMAIN_SEPARATOR(), claimHash);

        (bytes32 r, bytes32 vs) = vm.signCompact(swapperPrivateKey, digest);
        bytes memory sponsorSignature = hex"41414141414141414141";

        (r, vs) = vm.signCompact(allocatorPrivateKey, digest);
        bytes memory allocatorData = abi.encodePacked(r, vs);

        uint256 claimantOne = abi.decode(abi.encodePacked(bytes12(0), recipientOne), (uint256));
        uint256 claimantTwo = abi.decode(abi.encodePacked(bytes12(0), recipientTwo), (uint256));

        SplitComponent memory splitOne = SplitComponent({ claimant: claimantOne, amount: amountOne });

        SplitComponent memory splitTwo = SplitComponent({ claimant: claimantTwo, amount: amountTwo });

        SplitComponent[] memory recipients = new SplitComponent[](2);
        recipients[0] = splitOne;
        recipients[1] = splitTwo;

        Claim memory claim = Claim(
            allocatorData, sponsorSignature, swapper, nonce, expires, witness, witnessTypestring, id, amount, recipients
        );

        vm.prank(arbiter);
        (bytes32 returnedClaimHash) = theCompact.claim(claim);
        vm.snapshotGasLastCall("claimAndWithdraw");
        assertEq(returnedClaimHash, claimHash);

        assertEq(address(theCompact).balance, 0);
        assertEq(recipientOne.balance, amountOne);
        assertEq(recipientTwo.balance, amountTwo);
        assertEq(theCompact.balanceOf(swapper, id), 0);
        assertEq(theCompact.balanceOf(recipientOne, id), 0);
        assertEq(theCompact.balanceOf(recipientTwo, id), 0);
    }

    // TODO: get to here; working after this point

    function test_standardTransfer() public {
        address recipient = 0x1111111111111111111111111111111111111111;
        uint256 amount = 1e18;

        (, bytes12 lockTag) = _registerAllocator(alwaysOKAllocator);

        uint256 id = _makeDeposit(swapper, amount, lockTag);

        assertEq(address(theCompact).balance, amount);
        assertEq(theCompact.balanceOf(swapper, id), amount);
        assertEq(theCompact.balanceOf(recipient, id), 0);

        vm.prank(swapper);
        bool status = theCompact.transfer(recipient, id, amount);
        assert(status);

        assertEq(address(theCompact).balance, amount);
        assertEq(theCompact.balanceOf(swapper, id), 0);
        assertEq(theCompact.balanceOf(recipient, id), amount);
    }

    function test_allocatorId_leadingZeroes() public pure {
        address allocator1 = address(0x00000000000018DF021Ff2467dF97ff846E09f48);
        uint8 compactFlag1 = IdLib.toCompactFlag(allocator1);
        assertEq(compactFlag1, 9);

        address allocator2 = address(0x0000000000000000000000000000000000000000);
        uint8 compactFlag2 = IdLib.toCompactFlag(allocator2);
        assertEq(compactFlag2, 15);

        address allocator3 = address(0x0009524d380Dd4D95dfB975C50DaF3343BC177D9);
        uint8 compactFlag3 = IdLib.toCompactFlag(allocator3);
        assertEq(compactFlag3, 0);

        address allocator4 = address(0x00002752B69c388ac734CF666fB335588AE92618);
        uint8 compactFlag4 = IdLib.toCompactFlag(allocator4);
        assertEq(compactFlag4, 1);
    }

    function test_fuzz_addressToCompactFlag(address a) public pure {
        uint256 leadingZeroes = _countLeadingZeroes(a);
        uint8 compactFlag = IdLib.toCompactFlag(a);

        /**
         * The full scoring formula is:
         *  - 0-3 leading zero nibbles: 0
         *  - 4-17 leading zero nibbles: number of leading zeros minus 3
         *  - 18+ leading zero nibbles: 15
         */
        if (leadingZeroes < 4) assertEq(compactFlag, 0);
        else if (leadingZeroes <= 18) assertEq(compactFlag, leadingZeroes - 3);
        else assertEq(compactFlag, 15);
    }

    function _countLeadingZeroes(address a) internal pure returns (uint256) {
        address flag = address(0x0fffFFFFFfFfffFfFfFFffFffFffFFfffFfFFFFf);

        // addresses have a maximum of 40 leading 0s
        for (uint256 i = 0; i < 40; i++) {
            if (uint160(a) > uint160(uint160(flag) >> (4 * i))) return i;
        }
        // if the loop exits, the address is the 0 address
        return 40;
    }

    /**
     * Helper function to create a lock tag with the given parameters
     */
    function _createLockTag(ResetPeriod resetPeriod, Scope scope, uint96 allocatorId) internal pure returns (bytes12) {
        return bytes12(bytes32((uint256(scope) << 255) | (uint256(resetPeriod) << 252) | (uint256(allocatorId) << 160)));
    }

    /**
     * Helper function to create and register an allocator
     */
    function _registerAllocator(address _allocator) internal returns (uint96 allocatorId, bytes12 lockTag) {
        vm.prank(_allocator);
        allocatorId = theCompact.__registerAllocator(_allocator, "");
        lockTag = _createLockTag(ResetPeriod.TenMinutes, Scope.Multichain, allocatorId);
        return (allocatorId, lockTag);
    }

    /**
     * Helper function to create a witness hash for a compact witness
     */
    function _createCompactWitness(uint256 _witnessArgument) internal pure returns (bytes32 witness) {
        witness = keccak256(abi.encode(keccak256("CompactWitness(uint256 witnessArgument)"), _witnessArgument));
        return witness;
    }

    function _createClaimHash(
        bytes32 typehash,
        address arbiter,
        address sponsor,
        uint256 nonce,
        uint256 expires,
        uint256 id,
        uint256 amount
    ) internal pure returns (bytes32) {
        return keccak256(abi.encode(typehash, arbiter, sponsor, nonce, expires, id, amount));
    }

    /**
     * Helper function to create a claim hash with witness
     */
    function _createClaimHashWithWitness(CreateClaimHashWithWitnessArgs memory args) internal pure returns (bytes32) {
        return keccak256(
            abi.encode(
                args.typehash, args.arbiter, args.sponsor, args.nonce, args.expires, args.id, args.amount, args.witness
            )
        );
    }

    /**
     * Helper function to create a batch claim hash with witness
     */
    function _createBatchClaimHashWithWitness(CreateBatchClaimHashWithWitnessArgs memory args)
        internal
        pure
        returns (bytes32)
    {
        return keccak256(
            abi.encode(
                args.typehash,
                args.arbiter,
                args.sponsor,
                args.nonce,
                args.expires,
                args.idsAndAmountsHash,
                args.witness
            )
        );
    }

    function _createDigest(bytes32 domainSeparator, bytes32 hashValue) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(bytes2(0x1901), domainSeparator, hashValue));
    }

    /**
     * Helper function to create a permit batch witness digest
     */
    function _createPermitBatchWitnessDigest(CreatePermitBatchWitnessDigestArgs memory args)
        internal
        pure
        returns (bytes32)
    {
        bytes32 activationHash = keccak256(abi.encode(args.activationTypehash, args.idsHash, args.claimHash));

        bytes32 permitBatchHash = keccak256(
            abi.encode(
                keccak256(
                    "PermitBatchWitnessTransferFrom(TokenPermissions[] permitted,address spender,uint256 nonce,uint256 deadline,BatchActivation witness)BatchActivation(uint256[] ids,BatchCompact compact)BatchCompact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)TokenPermissions(address token,uint256 amount)"
                ),
                args.tokenPermissionsHash,
                args.spender,
                args.nonce,
                args.deadline,
                activationHash
            )
        );

        return keccak256(abi.encodePacked(bytes2(0x1901), args.domainSeparator, permitBatchHash));
    }

    function _setupPermitCallExpectation(SetupPermitCallExpectationArgs memory args) internal {
        // Create token permissions for the call
        ISignatureTransfer.TokenPermissions[] memory tokenPermissionsOnCall =
            new ISignatureTransfer.TokenPermissions[](2);
        tokenPermissionsOnCall[0] = ISignatureTransfer.TokenPermissions({ token: address(token), amount: 1e18 });
        tokenPermissionsOnCall[1] = ISignatureTransfer.TokenPermissions({ token: address(anotherToken), amount: 1e18 });

        // Create signature transfer details
        ISignatureTransfer.SignatureTransferDetails[] memory signatureTransferDetails =
            new ISignatureTransfer.SignatureTransferDetails[](2);
        signatureTransferDetails[0] =
            ISignatureTransfer.SignatureTransferDetails({ to: address(theCompact), requestedAmount: 1e18 });
        signatureTransferDetails[1] =
            ISignatureTransfer.SignatureTransferDetails({ to: address(theCompact), requestedAmount: 1e18 });

        // Create activation hash
        bytes32 activationHash =
            keccak256(abi.encode(args.activationTypehash, keccak256(abi.encodePacked(args.ids)), args.claimHash));

        // Setup expectation
        vm.expectCall(
            address(permit2),
            abi.encodeWithSignature(
                "permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)",
                ISignatureTransfer.PermitBatchTransferFrom({
                    permitted: tokenPermissionsOnCall,
                    nonce: args.nonce,
                    deadline: args.deadline
                }),
                signatureTransferDetails,
                swapper,
                activationHash,
                "BatchActivation witness)BatchActivation(uint256[] ids,BatchCompact compact)BatchCompact(address arbiter,address sponsor,uint256 nonce,uint256 expires,uint256[2][] idsAndAmounts,CompactWitness witness)CompactWitness(uint256 witnessArgument)TokenPermissions(address token,uint256 amount)",
                args.signature
            )
        );
    }

    function _createPermit2BatchSignature(
        address[] memory tokens,
        uint256[] memory amounts,
        uint256 nonce,
        uint256 deadline,
        bytes12 lockTag,
        address recipient,
        uint256 privateKey
    ) internal view returns (bytes memory signature, ISignatureTransfer.TokenPermissions[] memory tokenPermissions) {
        // Create token permissions array
        tokenPermissions = new ISignatureTransfer.TokenPermissions[](tokens.length);
        for (uint256 i = 0; i < tokens.length; i++) {
            tokenPermissions[i] = ISignatureTransfer.TokenPermissions({ token: tokens[i], amount: amounts[i] });
        }

        // Create digest for signing
        bytes32 domainSeparator =
            keccak256(abi.encode(permit2EIP712DomainHash, keccak256(bytes("Permit2")), block.chainid, address(permit2)));

        bytes32 tokenPermissionsPortion = keccak256(
            abi.encode(
                keccak256(
                    abi.encode(
                        keccak256("TokenPermissions(address token,uint256 amount)"),
                        tokens[tokens.length > 1 ? 1 : 0],
                        amounts[tokens.length > 1 ? 1 : 0]
                    )
                )
            )
        );

        bytes32 digest = keccak256(
            abi.encodePacked(
                bytes2(0x1901),
                domainSeparator,
                keccak256(
                    abi.encode(
                        keccak256(
                            "PermitBatchWitnessTransferFrom(TokenPermissions[] permitted,address spender,uint256 nonce,uint256 deadline,CompactDeposit witness)CompactDeposit(bytes12 lockTag,address recipient)TokenPermissions(address token,uint256 amount)"
                        ),
                        tokenPermissionsPortion,
                        address(theCompact), // spender
                        nonce,
                        deadline,
                        keccak256(
                            abi.encode(
                                keccak256("CompactDeposit(bytes12 lockTag,address recipient)"), lockTag, recipient
                            )
                        )
                    )
                )
            )
        );

        // Sign the digest
        (bytes32 r, bytes32 vs) = vm.signCompact(privateKey, digest);
        signature = abi.encodePacked(r, vs);

        return (signature, tokenPermissions);
    }

    function _makeDeposit(address guy, uint256 amount, bytes12 lockTag) internal returns (uint256 id) {
        vm.prank(guy);
        id = theCompact.deposit{ value: amount }(lockTag, guy);
        assertEq(theCompact.balanceOf(guy, id), amount);
    }

    function _makeDeposit(address guy, address asset, uint256 amount, bytes12 lockTag) internal returns (uint256 id) {
        vm.prank(guy);
        id = theCompact.deposit(asset, lockTag, amount, guy);
        assertEq(theCompact.balanceOf(guy, id), amount);
    }
}
